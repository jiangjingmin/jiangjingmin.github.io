(window.webpackJsonp=window.webpackJsonp||[]).push([[266],{673:function(t,s,a){"use strict";a.r(s);var n=a(28),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"八股文-001"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#八股文-001"}},[t._v("#")]),t._v(" 八股文-001")]),t._v(" "),a("h2",{attrs:{id:"http-和-https"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-和-https"}},[t._v("#")]),t._v(" HTTP 和 HTTPS")]),t._v(" "),a("h3",{attrs:{id:"_1-概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-概念"}},[t._v("#")]),t._v(" 1. 概念")]),t._v(" "),a("ul",[a("li",[t._v("http: 是一个客户端和服务器端请求和应答的标准（TCP），用于从 WWW 服务器传输超文本到本地浏览器的超文本传输协议。")]),t._v(" "),a("li",[t._v("https: 是以安全为目标的 HTTP 通道，即 HTTP 下 加入 SSL 层进行加密。其作用是：建立一个信息安全通道，来确保数据的传输和真实性。")])]),t._v(" "),a("h3",{attrs:{id:"_2-区别及优缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-区别及优缺点"}},[t._v("#")]),t._v(" 2. 区别及优缺点")]),t._v(" "),a("p",[a("code",[t._v("HTTP")]),t._v("是超文本传输协议，信息是明文传输，"),a("code",[t._v("HTTPS")]),t._v(" 协议要比 "),a("code",[t._v("HTTP")]),t._v(" 协议"),a("strong",[t._v("安全")]),t._v("，"),a("code",[t._v("HTTPS")]),t._v(" 是具有安全性的 "),a("code",[t._v("SSL")]),t._v(" 加密传输协议，可防止数据在传输过程中不被窃取、改变，确保数据的完整性。")]),t._v(" "),a("blockquote",[a("p",[t._v("HTTP 主要特点：简单快速、灵活、无连接、无状态")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("HTTP")]),t._v(" 协议的"),a("strong",[t._v("默认端口")]),t._v("为 80，"),a("code",[t._v("HTTPS")]),t._v(" 的默认端口为 443")]),t._v(" "),a("li",[a("code",[t._v("HTTP")]),t._v(" 的连接很简单，是无状态的。"),a("code",[t._v("HTTPS")]),t._v(" 握手阶段比较"),a("strong",[t._v("费时")]),t._v("，会使页面加载时间延长 50%，增加 10%~20%的耗电。")]),t._v(" "),a("li",[a("code",[t._v("HTTPS")]),t._v(" 缓存不如 "),a("code",[t._v("HTTP")]),t._v(" 高效，会增加数据开销。")]),t._v(" "),a("li",[a("code",[t._v("HTTPS")]),t._v("协议需要 ca 证书，费用较高，功能越强大的"),a("strong",[t._v("证书费")]),t._v("用越高。")]),t._v(" "),a("li",[t._v("SSL 证书需要绑定 "),a("code",[t._v("IP")]),t._v("，不能再同一个 IP 上绑定多个域名，IPV4 资源支持不了这种消耗。")])]),t._v(" "),a("h3",{attrs:{id:"_3-https-工作原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-https-工作原理"}},[t._v("#")]),t._v(" 3. HTTPS 工作原理")]),t._v(" "),a("p",[t._v("客户端在使用 HTTPS 方式与 Web 服务器通信时有以下几个步骤：")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("建立 ssl 链接")]),t._v("：客户端使用 https url 访问服务器，则要求 web 服务器"),a("code",[t._v("建立 ssl 链接")]),t._v("。")]),t._v(" "),a("li",[a("strong",[t._v("传输证书")]),t._v("：web 服务器接收到客户端的请求之后，会"),a("code",[t._v("将网站的证书（证书中包含了公钥），传输给客户端")]),t._v("。")]),t._v(" "),a("li",[a("strong",[t._v("协商安全等级")]),t._v("：客户端和 web 服务器端开始"),a("code",[t._v("协商 SSL 链接的安全等级")]),t._v("，也就是加密等级。")]),t._v(" "),a("li",[a("strong",[t._v("建立会话密钥")]),t._v("：客户端浏览器通过双方协商一致的安全等级，"),a("code",[t._v("建立会话密钥")]),t._v("，然后通过网站的公钥来加密会话密钥，并传送给网站。")]),t._v(" "),a("li",[a("strong",[t._v("解密密钥")]),t._v("：web 服务器"),a("code",[t._v("通过自己的私钥解密出会话密钥")]),t._v("。")]),t._v(" "),a("li",[a("strong",[t._v("进行通信")]),t._v("：web 服务器"),a("code",[t._v("通过会话密钥加密与客户端之间的通信")]),t._v("。")])]),t._v(" "),a("p",[t._v("传送门 ☞ "),a("a",{attrs:{href:"https://juejin.cn/post/6995109407545622542",target:"_blank",rel:"noopener noreferrer"}},[t._v("# 解读 HTTP1/HTTP2/HTTP3(opens new window)"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"tcp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tcp"}},[t._v("#")]),t._v(" TCP")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/199284611?from=timeline",target:"_blank",rel:"noopener noreferrer"}},[t._v("彻底搞懂TCP协议：从 TCP 三次握手四次挥手说起 - 知乎 (zhihu.com)"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"_1-tcp三次握手"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-tcp三次握手"}},[t._v("#")]),t._v(" 1. TCP三次握手")]),t._v(" "),a("ol",[a("li",[t._v("第一次握手：服务器（S）只可以确认自己可以接受客户端（C）发送的报文段；")]),t._v(" "),a("li",[t._v("第二次握手：客户端（C）可以确认服务器（S）收到了自己发送的报文段，并且可以确认自己可以接受服务器（S）发送的报文段；")]),t._v(" "),a("li",[t._v("第三次握手：服务器（S）可以确认客户端（C）收到了自己发送的报文段；")])]),t._v(" "),a("blockquote",[a("p",[t._v("握手过程中传送的包里不包含数据，三次握手完毕后，客户端与服务器才正式开始传送数据。")])]),t._v(" "),a("h3",{attrs:{id:"_2-tcp-四次挥手"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-tcp-四次挥手"}},[t._v("#")]),t._v(" 2. TCP 四次挥手")]),t._v(" "),a("ol",[a("li",[t._v("Client 发送一个 FIN 包来告诉 Server 我已经没数据需要发给 Server 了；")]),t._v(" "),a("li",[t._v("Server 收到后回复一个 ACK 确认包说我知道了；")]),t._v(" "),a("li",[t._v("然后 server 在自己也没数据发送给 client 后，Server 也发送一个 FIN 包给 Client 告诉 Client 我也已经没数据发给 client 了；")]),t._v(" "),a("li",[t._v("Client 收到后，就会回复一个 ACK 确认包说我知道了。")])]),t._v(" "),a("h3",{attrs:{id:"_3-tcp-ip如何保证数据包传输的有序可靠"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-tcp-ip如何保证数据包传输的有序可靠"}},[t._v("#")]),t._v(" 3. TCP/IP如何保证数据包传输的有序可靠")]),t._v(" "),a("p",[t._v("对字节流分段并进行编号然后"),a("code",[t._v("通过 ACK 回复")]),t._v("和"),a("code",[t._v("超时重发")]),t._v("这两个机制来保证。")]),t._v(" "),a("p",[t._v("（1）为了保证数据包的可靠传递，发送方必须把已发送的数据包保留在缓冲区；\n（2）并为每个已发送的数据包启动一个超时定时器；\n（3）如在定时器超时之前收到了对方发来的应答信息（可能是对本包的应答，也可以是对本包后续包的应答），则释放该数据包占用的缓冲区;\n（4）否则，重传该数据包，直到收到应答或重传次数超过规定的最大次数为止。\n（5）接收方收到数据包后，先进行CRC校验，如果正确则把数据交给上层协议，然后给发送方发送一个累计应答包，表明该数据已收到，如果接收方正好也有数据要发给发送方，应答包也可方在数据包中捎带过去。")]),t._v(" "),a("h3",{attrs:{id:"_4-tcp和udp的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-tcp和udp的区别"}},[t._v("#")]),t._v(" 4. TCP和UDP的区别")]),t._v(" "),a("ol",[a("li",[t._v("TCP是面向"),a("code",[t._v("链接")]),t._v("的，而UDP是面向无连接的。")]),t._v(" "),a("li",[t._v("TCP仅支持"),a("code",[t._v("单播传输")]),t._v("，UDP 提供了单播，多播，广播的功能。")]),t._v(" "),a("li",[t._v("TCP的三次握手保证了连接的"),a("code",[t._v("可靠性")]),t._v("; UDP是无连接的、不可靠的一种数据传输协议，首先不可靠性体现在无连接上，通信都不需要建立连接，对接收到的数据也不发送确认信号，发送端不知道数据是否会正确接收。")]),t._v(" "),a("li",[t._v("UDP的"),a("code",[t._v("头部开销")]),t._v("比TCP的更小，数据"),a("code",[t._v("传输速率更高")]),t._v("，"),a("code",[t._v("实时性更好")]),t._v("。")])]),t._v(" "),a("p",[t._v("传送门 ☞ "),a("a",{attrs:{href:"https://juejin.cn/post/6992743999756845087",target:"_blank",rel:"noopener noreferrer"}},[t._v("# 深度剖析TCP与UDP的区别"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"_5-tcp粘包问题分析与对策"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-tcp粘包问题分析与对策"}},[t._v("#")]),t._v(" 5. TCP粘包问题分析与对策")]),t._v(" "),a("p",[t._v("TCP粘包是指发送方发送的若干包数据到接收方接收时粘成一包，从接收缓冲区看，后一包数据的头紧接着前一包数据的尾。")]),t._v(" "),a("p",[a("strong",[t._v("粘包出现原因")])]),t._v(" "),a("p",[t._v("简单得说，在流传输中出现，UDP不会出现粘包，因为它有"),a("strong",[t._v("消息边界")])]),t._v(" "),a("p",[t._v("粘包情况有两种，一种是"),a("code",[t._v("粘在一起的包都是完整的数据包")]),t._v("，另一种情况是"),a("code",[t._v("粘在一起的包有不完整的包")]),t._v("。")]),t._v(" "),a("p",[t._v("为了"),a("strong",[t._v("避免粘包")]),t._v("现象，可采取以下几种措施：")]),t._v(" "),a("p",[t._v("（1）对于发送方引起的粘包现象，用户可通过编程设置来避免，"),a("code",[t._v("TCP提供了强制数据立即传送的操作指令push")]),t._v("，TCP软件收到该操作指令后，就立即将本段数据发送出去，而不必等待发送缓冲区满；")]),t._v(" "),a("p",[t._v("（2）对于接收方引起的粘包，则可通过优化程序设计、精简接收进程工作量、"),a("code",[t._v("提高接收进程优先级等措施")]),t._v("，使其及时接收数据，从而尽量避免出现粘包现象；")]),t._v(" "),a("p",[t._v("（3）由接收方控制，将一包数据按结构字段，人为控制分多次接收，然后合并，通过这种手段来避免粘包。"),a("code",[t._v("分包多发")]),t._v("。")]),t._v(" "),a("p",[t._v("以上提到的三种措施，都有其不足之处。")]),t._v(" "),a("p",[t._v("（1）第一种编程设置方法虽然可以避免发送方引起的粘包，但它关闭了优化算法，降低了网络发送效率，影响应用程序的性能，一般不建议使用。")]),t._v(" "),a("p",[t._v("（2）第二种方法只能减少出现粘包的可能性，但并不能完全避免粘包，当发送频率较高时，或由于网络突发可能使某个时间段数据包到达接收方较快，接收方还是有可能来不及接收，从而导致粘包。")]),t._v(" "),a("p",[t._v("（3）第三种方法虽然避免了粘包，但应用程序的效率较低，对实时应用的场合不适合。")]),t._v(" "),a("blockquote",[a("p",[t._v("一种比较周全的对策是：接收方创建一预处理线程，对接收到的数据包进行预处理，将粘连的包分开。实验证明这种方法是高效可行的。")])]),t._v(" "),a("h2",{attrs:{id:"http-请求跨域问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-请求跨域问题"}},[t._v("#")]),t._v(" HTTP 请求跨域问题")]),t._v(" "),a("h3",{attrs:{id:"_1-跨域的原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-跨域的原理"}},[t._v("#")]),t._v(" 1. 跨域的原理")]),t._v(" "),a("p",[a("strong",[t._v("跨域")]),t._v("，是指浏览器不能执行其他网站的脚本。它是由浏览器的"),a("code",[t._v("同源策略")]),t._v("造成的。\n"),a("strong",[t._v("同源策略")]),t._v(",是浏览器对 JavaScript 实施的安全限制，只要"),a("code",[t._v("协议、域名、端口")]),t._v("有任何一个不同，都被当作是不同的域。\n"),a("strong",[t._v("跨域原理")]),t._v("，即是通过各种方式，"),a("code",[t._v("避开浏览器的安全限制")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"_2-解决方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-解决方案"}},[t._v("#")]),t._v(" 2. 解决方案")]),t._v(" "),a("p",[t._v("最初做项目的时候，使用的是jsonp，但存在一些问题，使用get请求不安全，携带数据较小，后来也用过iframe，但只有主域相同才行，也是存在些问题，后来通过了解和学习发现使用代理和proxy代理配合起来使用比较方便，就引导后台按这种方式做下服务器配置，在开发中使用proxy，在服务器上使用nginx代理，这样开发过程中彼此都方便，效率也高；现在h5新特性还有 windows.postMessage()")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("JSONP")]),t._v("：\najax 请求受同源策略影响，不允许进行跨域请求，而 script 标签 src 属性中的链 接却可以访问跨域的 js 脚本，利用这个特性，服务端不再返回 JSON 格式的数据，而是 返回一段调用某个函数的 js 代码，在 src 中进行了调用，这样实现了跨域。")]),t._v(" "),a("p",[t._v("步骤：")]),t._v(" "),a("ol",[a("li",[t._v("去创建一个script标签")]),t._v(" "),a("li",[t._v("script的src属性设置接口地址")]),t._v(" "),a("li",[t._v("接口参数，必须要带一个自定义函数名，要不然后台无法返回数据")]),t._v(" "),a("li",[t._v("通过定义函数名去接受返回的数据")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//动态创建 script")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" script "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createElement")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'script'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置回调函数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getData")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("data")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//设置 script 的 src 属性，并设置请求地址")]),t._v("\nscript"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("src "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'http://localhost:3000/?callback=getData'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 让 script 生效")]),t._v("\ndocument"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("body"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("appendChild")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("script"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n复制代码\n")])])]),a("p",[a("strong",[t._v("JSONP 的缺点")]),t._v(":\nJSON 只支持 get，因为 script 标签只能使用 get 请求； JSONP 需要后端配合返回指定格式的数据。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("document.domain")]),t._v(" 基础域名相同 子域名不同")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("window.name")]),t._v(" 利用在一个浏览器窗口内，载入所有的域名都是共享一个window.name")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("CORS")]),t._v(" CORS(Cross-origin resource sharing)跨域资源共享 服务器设置对CORS的支持原理：服务器设置Access-Control-Allow-Origin HTTP响应头之后，浏览器将会允许跨域请求")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("proxy代理")]),t._v(" 目前常用方式,通过服务器设置代理")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("window.postMessage()")]),t._v(" 利用h5新特性window.postMessage()")])])]),t._v(" "),a("h2",{attrs:{id:"本地存储"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#本地存储"}},[t._v("#")]),t._v(" 本地存储")]),t._v(" "),a("p",[t._v("有Cookie、sessionStorage、localStorage")]),t._v(" "),a("p",[a("strong",[t._v("相同点")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("存储在客户端")])]),t._v(" "),a("p",[a("strong",[t._v("不同点")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("cookie数据大小不能超过4k；sessionStorage和localStorage的存储比cookie大得多，可以达到5M+")]),t._v(" "),a("li",[t._v("cookie设置的过期时间之前一直有效；localStorage永久存储，浏览器关闭后数据不丢失除非主动删除数据；sessionStorage数据在当前浏览器窗口关闭后自动删除")]),t._v(" "),a("li",[t._v("cookie的数据会自动的传递到服务器；sessionStorage和localStorage数据保存在本地")])]),t._v(" "),a("h2",{attrs:{id:"浏览器从输入url到页面加载的全过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器从输入url到页面加载的全过程"}},[t._v("#")]),t._v(" 浏览器从输入URL到页面加载的全过程")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e44aa8a92602405db3c12161b71e2094~tplv-k3u1fbpfcp-watermark.awebp",alt:"从输入URL到页面加载的主干流程"}})]),t._v(" "),a("ol",[a("li",[a("p",[t._v("首先在浏览器中输入URL")])]),t._v(" "),a("li",[a("p",[t._v("查找缓存：浏览器先查看浏览器缓存-系统缓存-路由缓存中是否有该地址页面，如果有则显示页面内容。如果没有则进行下一步。")]),t._v(" "),a("ul",[a("li",[t._v("浏览器缓存：浏览器会记录DNS一段时间，因此，只是第一个地方解析DNS请求；")]),t._v(" "),a("li",[t._v("操作系统缓存:如果在浏览器缓存中不包含这个记录，则会使系统调用操作系统， 获取操作系统的记录(保存最近的DNS查询缓存)；")]),t._v(" "),a("li",[t._v("路由器缓存：如果上述两个步骤均不能成功获取DNS记录，继续搜索路由器缓存；")]),t._v(" "),a("li",[t._v("ISP缓存：若上述均失败，继续向ISP搜索。")])])]),t._v(" "),a("li",[a("p",[t._v("DNS域名解析：浏览器向DNS服务器发起请求，解析该URL中的域名对应的IP地址。"),a("code",[t._v("DNS服务器是基于UDP的，因此会用到UDP协议。")]),t._v("。")])]),t._v(" "),a("li",[a("p",[t._v("建立TCP连接：解析出IP地址后，根据IP地址和默认80端口，和服务器建立TCP连接")])]),t._v(" "),a("li",[a("p",[t._v("发起HTTP请求：浏览器发起读取文件的HTTP请求，，该请求报文作为TCP三次握手的第三次数据发送给服务器")])]),t._v(" "),a("li",[a("p",[t._v("服务器响应请求并返回结果：服务器对浏览器请求做出响应，并把对应的html文件发送给浏览器")])]),t._v(" "),a("li",[a("p",[t._v("关闭TCP连接：通过四次挥手释放TCP连接")])]),t._v(" "),a("li",[a("p",[t._v("浏览器渲染：客户端（浏览器）解析HTML内容并渲染出来，浏览器接收到数据包后的解析流程为：")]),t._v(" "),a("ul",[a("li",[t._v("构建DOM树：词法分析然后解析成DOM树（dom tree），是由dom元素及属性节点组成，树的根是document对象")]),t._v(" "),a("li",[t._v("构建CSS规则树：生成CSS规则树（CSS Rule Tree）")]),t._v(" "),a("li",[t._v("构建render树：Web浏览器将DOM和CSSOM结合，并构建出渲染树（render tree）")]),t._v(" "),a("li",[t._v("布局（Layout）：计算出每个节点在屏幕中的位置")]),t._v(" "),a("li",[t._v("绘制（Painting）：即遍历render树，并使用UI后端层绘制每个节点。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a90660027f0d4c559732519bad4c6323~tplv-k3u1fbpfcp-watermark.awebp",alt:"浏览器渲染流程图"}})])]),t._v(" "),a("li",[a("p",[t._v("JS引擎解析过程：调用JS引擎执行JS代码（JS的解释阶段，预处理阶段，执行阶段生成执行上下文，VO，作用域链、回收机制等等）")]),t._v(" "),a("ul",[a("li",[t._v("创建window对象：window对象也叫全局执行环境，当页面产生时就被创建，所有的全局变量和函数都属于window的属性和方法，而DOM Tree也会映射在window的doucment对象上。当关闭网页或者关闭浏览器时，全局执行环境会被销毁。")]),t._v(" "),a("li",[t._v("加载文件：完成js引擎分析它的语法与词法是否合法，如果合法进入预编译")]),t._v(" "),a("li",[t._v("预编译：在预编译的过程中，浏览器会寻找全局变量声明，把它作为window的属性加入到window对象中，并给变量赋值为'undefined'；寻找全局函数声明，把它作为window的方法加入到window对象中，并将函数体赋值给他（匿名函数是不参与预编译的，因为它是变量）。而变量提升作为不合理的地方在ES6中已经解决了，函数提升还存在。")]),t._v(" "),a("li",[t._v("解释执行：执行到变量就赋值，如果变量没有被定义，也就没有被预编译直接赋值，在ES5非严格模式下这个变量会成为window的一个属性，也就是成为全局变量。string、int这样的值就是直接把值放在变量的存储空间里，object对象就是把指针指向变量的存储空间。函数执行，就将函数的环境推入一个环境的栈中，执行完成后再弹出，控制权交还给之前的环境。JS作用域其实就是这样的执行流机制实现的。")])])])]),t._v(" "),a("h2",{attrs:{id:"重排和重绘"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重排和重绘"}},[t._v("#")]),t._v(" 重排和重绘")]),t._v(" "),a("h3",{attrs:{id:"_1-浏览器重绘与重排的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-浏览器重绘与重排的区别"}},[t._v("#")]),t._v(" 1 浏览器重绘与重排的区别？")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("重排/回流（Reflow）")]),t._v("：当"),a("code",[t._v("DOM")]),t._v("的变化影响了元素的几何信息，浏览器需要重新计算元素的几何属性，将其安放在界面中的正确位置，这个过程叫做重排。表现为重新生成布局，重新排列元素。")]),t._v(" "),a("li",[a("code",[t._v("重绘(Repaint)")]),t._v(": 当一个元素的外观发生改变，但没有改变布局,重新把元素外观绘制出来的过程，叫做重绘。表现为某些元素的外观被改变")])]),t._v(" "),a("p",[t._v("单单改变元素的外观，肯定不会引起网页重新生成布局，但当浏览器完成重排之后，将会重新绘制受到此次重排影响的部分")]),t._v(" "),a("p",[t._v("重排和重绘代价是高昂的，它们会破坏用户体验，并且让UI展示非常迟缓，而相比之下重排的性能影响更大，在两者无法避免的情况下，一般我们宁可选择代价更小的重绘。")]),t._v(" "),a("p",[t._v("『重绘』不一定会出现『重排』，『重排』必然会出现『重绘』。")]),t._v(" "),a("h3",{attrs:{id:"_2-如何触发重排和重绘"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-如何触发重排和重绘"}},[t._v("#")]),t._v(" 2 如何触发重排和重绘？")]),t._v(" "),a("p",[t._v("任何改变用来构建渲染树的信息都会导致一次重排或重绘：")]),t._v(" "),a("ul",[a("li",[t._v("添加、删除、更新DOM节点")]),t._v(" "),a("li",[t._v("通过display: none隐藏一个DOM节点-触发重排和重绘")]),t._v(" "),a("li",[t._v("通过visibility: hidden隐藏一个DOM节点-只触发重绘，因为没有几何变化")]),t._v(" "),a("li",[t._v("移动或者给页面中的DOM节点添加动画")]),t._v(" "),a("li",[t._v("添加一个样式表，调整样式属性")]),t._v(" "),a("li",[t._v("用户行为，例如调整窗口大小，改变字号，或者滚动。")])]),t._v(" "),a("h3",{attrs:{id:"_3-如何避免重绘或者重排"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-如何避免重绘或者重排"}},[t._v("#")]),t._v(" 3 如何避免重绘或者重排？")]),t._v(" "),a("ol",[a("li",[a("p",[a("code",[t._v("集中改变样式")]),t._v("，不要一条一条地修改 DOM 的样式。")])]),t._v(" "),a("li",[a("p",[t._v("不要把 DOM 结点的属性值放在循环里当成循环里的变量。")])]),t._v(" "),a("li",[a("p",[t._v("为动画的 HTML 元件使用 "),a("code",[t._v("fixed")]),t._v(" 或 "),a("code",[t._v("absoult")]),t._v(" 的 "),a("code",[t._v("position")]),t._v("，那么修改他们的 CSS 是不会 reflow 的。")])]),t._v(" "),a("li",[a("p",[t._v("不使用 table 布局。因为可能很小的一个小改动会造成整个 table 的重新布局。")])]),t._v(" "),a("li",[a("p",[t._v("尽量只修改"),a("code",[t._v("position：absolute")]),t._v("或"),a("code",[t._v("fixed")]),t._v("元素，对其他元素影响不大")])]),t._v(" "),a("li",[a("p",[t._v("动画开始"),a("code",[t._v("GPU")]),t._v("加速，"),a("code",[t._v("translate")]),t._v("使用"),a("code",[t._v("3D")]),t._v("变化")])]),t._v(" "),a("li",[a("p",[t._v("提升为合成层")]),t._v(" "),a("p",[t._v("将元素提升为合成层有以下优点：")]),t._v(" "),a("ul",[a("li",[t._v("合成层的位图，会交由 GPU 合成，比 CPU 处理要快")]),t._v(" "),a("li",[t._v("当需要 repaint 时，只需要 repaint 本身，不会影响到其他的层")]),t._v(" "),a("li",[t._v("对于 transform 和 opacity 效果，不会触发 layout 和 paint")])]),t._v(" "),a("p",[t._v("提升合成层的最好方式是使用 CSS 的 will-change 属性：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("#target {\n  will-change: transform;\n}\n复制代码\n")])])]),a("blockquote",[a("p",[t._v("关于合成层的详解请移步"),a("a",{attrs:{href:"https://link.juejin.cn?target=http%3A%2F%2Ftaobaofed.org%2Fblog%2F2016%2F04%2F25%2Fperformance-composite%2F",target:"_blank",rel:"noopener noreferrer"}},[t._v("无线性能优化：Composite"),a("OutboundLink")],1)])])])]),t._v(" "),a("h2",{attrs:{id:"介绍下304过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#介绍下304过程"}},[t._v("#")]),t._v(" 介绍下304过程")]),t._v(" "),a("ul",[a("li",[t._v("a. 浏览器请求资源时首先命中资源的Expires 和 Cache-Control，Expires 受限于本地时间，如果修改了本地时间，可能会造成缓存失效，可以通过Cache-control: max-age指定最大生命周期，状态仍然返回200，但不会请求数据，在浏览器中能明显看到from cache字样。")]),t._v(" "),a("li",[t._v("b. 强缓存失效，进入协商缓存阶段，首先验证ETagETag可以保证每一个资源是唯一的，资源变化都会导致ETag变化。服务器根据客户端上送的If-None-Match值来判断是否命中缓存。")]),t._v(" "),a("li",[t._v("c. 协商缓存Last-Modify/If-Modify-Since阶段，客户端第一次请求资源时，服务服返回的header中会加上Last-Modify，Last-modify是一个时间标识该资源的最后修改时间。再次请求该资源时，request的请求头中会包含If-Modify-Since，该值为缓存之前返回的Last-Modify。服务器收到If-Modify-Since后，根据资源的最后修改时间判断是否命中缓存。")])]),t._v(" "),a("h2",{attrs:{id:"浏览器缓存机制-强制缓存-协商缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器缓存机制-强制缓存-协商缓存"}},[t._v("#")]),t._v(" 浏览器缓存机制 强制缓存 && 协商缓存")]),t._v(" "),a("p",[t._v("浏览器与服务器通信的方式为应答模式，即是：浏览器发起HTTP请求 – 服务器响应该请求。那么浏览器第一次向服务器发起该请求后拿到请求结果，会根据响应报文中HTTP头的缓存标识，决定是否缓存结果，是则将请求结果和缓存标识存入浏览器缓存中，简单的过程如下图：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/487144abaada4b9a8b34bc9375191ec7~tplv-k3u1fbpfcp-watermark.awebp",alt:"图片"}})]),t._v(" "),a("p",[t._v("由上图我们可以知道：")]),t._v(" "),a("ul",[a("li",[t._v("浏览器每次发起请求，都会"),a("code",[t._v("先在浏览器缓存中查找该请求的结果以及缓存标识")])]),t._v(" "),a("li",[t._v("浏览器每次拿到返回的请求结果都会"),a("code",[t._v("将该结果和缓存标识存入浏览器缓存中")])])]),t._v(" "),a("p",[t._v("以上两点结论就是浏览器缓存机制的关键，他确保了每个请求的缓存存入与读取，只要我们再理解浏览器缓存的使用规则，那么所有的问题就迎刃而解了。为了方便理解，这里根据是否需要向服务器重新发起HTTP请求将缓存过程分为两个部分，分别是"),a("code",[t._v("强制缓存")]),t._v("和"),a("code",[t._v("协商缓存")]),t._v("。")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("强制缓存")])]),t._v(" "),a("p",[a("code",[t._v("强制缓存就是向浏览器缓存查找该请求结果，并根据该结果的缓存规则来决定是否使用该缓存结果的过程。")]),t._v("当浏览器向服务器发起请求时，服务器会将缓存规则放入HTTP响应报文的HTTP头中和请求结果一起返回给浏览器，控制强制缓存的字段分别是 "),a("code",[t._v("Expires")]),t._v(" 和 "),a("code",[t._v("Cache-Control")]),t._v("，其中Cache-Control优先级比Expires高。")]),t._v(" "),a("p",[t._v("强制缓存的情况主要有三种(暂不分析协商缓存过程)，如下：")]),t._v(" "),a("ol",[a("li",[t._v("不存在该缓存结果和缓存标识，强制缓存失效，则直接向服务器发起请求（跟第一次发起请求一致）。")]),t._v(" "),a("li",[t._v("存在该缓存结果和缓存标识，但该结果已失效，强制缓存失效，则使用协商缓存。")]),t._v(" "),a("li",[t._v("存在该缓存结果和缓存标识，且该结果尚未失效，强制缓存生效，直接返回该结果")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("协商缓存")])]),t._v(" "),a("p",[a("code",[t._v("协商缓存就是强制缓存失效后，浏览器携带缓存标识向服务器发起请求，由服务器根据缓存标识决定是否使用缓存的过程")]),t._v("，同样，协商缓存的标识也是在响应报文的HTTP头中和请求结果一起返回给浏览器的，控制协商缓存的字段分别有："),a("code",[t._v("Last-Modified / If-Modified-Since")]),t._v(" 和 "),a("code",[t._v("Etag / If-None-Match")]),t._v("，其中Etag / If-None-Match的优先级比Last-Modified / If-Modified-Since高。协商缓存主要有以下两种情况：")]),t._v(" "),a("ol",[a("li",[t._v("协商缓存生效，返回304")]),t._v(" "),a("li",[t._v("协商缓存失效，返回200和请求结果结果")])])])]),t._v(" "),a("p",[t._v("传送门 ☞ "),a("a",{attrs:{href:"https://juejin.cn/post/6992843117963509791",target:"_blank",rel:"noopener noreferrer"}},[t._v("# 彻底理解浏览器的缓存机制"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"进程、线程和协程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程、线程和协程"}},[t._v("#")]),t._v(" 进程、线程和协程")]),t._v(" "),a("p",[a("strong",[t._v("进程")]),t._v("是一个具有一定独立功能的程序在一个数据集上的一次动态执行的过程，"),a("code",[t._v("是操作系统进行资源分配和调度的一个独立单位")]),t._v("，是应用程序运行的载体。进程是一种抽象的概念，从来没有统一的标准定义。")]),t._v(" "),a("p",[a("strong",[t._v("线程")]),t._v("是程序执行中一个单一的顺序控制流程，是"),a("code",[t._v("程序执行流的最小单元")]),t._v("，是处理器调度和分派的基本单位。一个进程可以有一个或多个线程，各个线程之间共享程序的内存空间(也就是所在进程的内存空间)。一个标准的线程由线程ID、当前指令指针(PC)、寄存器和堆栈组成。而进程由内存空间(代码、数据、进程空间、打开的文件)和一个或多个线程组成。")]),t._v(" "),a("p",[a("strong",[t._v("协程")]),t._v("，英文Coroutines，是一种"),a("code",[t._v("基于线程之上，但又比线程更加轻量级的存在")]),t._v("，这种由程序员自己写程序来管理的轻量级线程叫做『用户空间线程』，具有对内核来说不可见的特性。")]),t._v(" "),a("p",[a("strong",[t._v("进程和线程的区别与联系")])]),t._v(" "),a("p",[t._v("【区别】：")]),t._v(" "),a("p",[t._v("调度：线程作为调度和分配的基本单位，进程作为拥有资源的基本单位；")]),t._v(" "),a("p",[t._v("并发性：不仅进程之间可以并发执行，同一个进程的多个线程之间也可并发执行；")]),t._v(" "),a("p",[t._v("拥有资源：进程是拥有资源的一个独立单位，线程不拥有系统资源，但可以访问隶属于进程的资源。")]),t._v(" "),a("p",[t._v("系统开销：在创建或撤消进程时，由于系统都要为之分配和回收资源，导致系统的开销明显大于创建或撤消线程时的开销。但是进程有独立的地址空间，一个进程崩溃后，在保护模式下不会对其它进程产生影响，而线程只是一个进程中的不同执行路径。线程有自己的堆栈和局部变量，但线程之间没有单独的地址空间，一个进程死掉就等于所有的线程死掉，所以多进程的程序要比多线程的程序健壮，但在进程切换时，耗费资源较大，效率要差一些。")]),t._v(" "),a("p",[t._v("【联系】：")]),t._v(" "),a("p",[t._v("一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程；")]),t._v(" "),a("p",[t._v("资源分配给进程，同一进程的所有线程共享该进程的所有资源；")]),t._v(" "),a("p",[t._v("处理机分给线程，即真正在处理机上运行的是线程；")]),t._v(" "),a("p",[t._v("线程在执行过程中，需要协作同步。不同进程的线程间要利用消息通信的办法实现同步。")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://link.juejin.cn?target=http%3A%2F%2Fwww.360doc.com%2Fcontent%2F20%2F0417%2F14%2F32196507_906628857.shtml",target:"_blank",rel:"noopener noreferrer"}},[t._v("☞了解更多"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"html5-新特性、语义化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#html5-新特性、语义化"}},[t._v("#")]),t._v(" HTML5 新特性、语义化")]),t._v(" "),a("ol",[a("li",[a("p",[a("strong",[t._v("概念")]),t._v("：")]),t._v(" "),a("p",[t._v("HTML5的语义化指的是"),a("code",[t._v("合理正确的使用语义化的标签来创建页面结构")]),t._v("。【正确的标签做正确的事】")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("语义化标签")]),t._v("：")]),t._v(" "),a("p",[t._v("header nav main article section aside footer")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("语义化的优点")]),t._v(":")]),t._v(" "),a("ul",[a("li",[t._v("在"),a("code",[t._v("没CSS样式的情况下，页面整体也会呈现很好的结构效果")])]),t._v(" "),a("li",[a("code",[t._v("代码结构清晰")]),t._v("，易于阅读，")]),t._v(" "),a("li",[a("code",[t._v("利于开发和维护")]),t._v(" 方便其他设备解析（如屏幕阅读器）根据语义渲染网页。")]),t._v(" "),a("li",[a("code",[t._v("有利于搜索引擎优化（SEO）")]),t._v("，搜索引擎爬虫会根据不同的标签来赋予不同的权重")])])])]),t._v(" "),a("h2",{attrs:{id:"css-选择器及优先级"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#css-选择器及优先级"}},[t._v("#")]),t._v(" CSS 选择器及优先级")]),t._v(" "),a("p",[a("strong",[t._v("选择器")])]),t._v(" "),a("ul",[a("li",[t._v("id选择器(#myid)")]),t._v(" "),a("li",[t._v("类选择器(.myclass)")]),t._v(" "),a("li",[t._v('属性选择器(a[rel="external"])')]),t._v(" "),a("li",[t._v("伪类选择器(a:hover, li:nth-child)")]),t._v(" "),a("li",[t._v("标签选择器(div, h1,p)")]),t._v(" "),a("li",[t._v("相邻选择器（h1 + p）")]),t._v(" "),a("li",[t._v("子选择器(ul > li)")]),t._v(" "),a("li",[t._v("后代选择器(li a)")]),t._v(" "),a("li",[t._v("通配符选择器(*)")])]),t._v(" "),a("p",[a("strong",[t._v("优先级：")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("!important")])]),t._v(" "),a("li",[t._v("内联样式（1000）")]),t._v(" "),a("li",[t._v("ID选择器（0100）")]),t._v(" "),a("li",[t._v("类选择器/属性选择器/伪类选择器（0010）")]),t._v(" "),a("li",[t._v("元素选择器/伪元素选择器（0001）")]),t._v(" "),a("li",[t._v("关系选择器/通配符选择器（0000）")])]),t._v(" "),a("p",[t._v("带!important 标记的样式属性优先级最高； 样式表的来源相同时："),a("code",[t._v("!important > 行内样式>ID选择器 > 类选择器 > 标签 > 通配符 > 继承 > 浏览器默认属性")])]),t._v(" "),a("h2",{attrs:{id:"position-属性的值有哪些及其区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#position-属性的值有哪些及其区别"}},[t._v("#")]),t._v(" position 属性的值有哪些及其区别")]),t._v(" "),a("p",[a("strong",[t._v("固定定位 fixed")]),t._v("： 元素的位置相对于浏览器窗口是固定位置，即使窗口是滚动的它也不会移动。Fixed 定 位使元素的位置与文档流无关，因此不占据空间。 Fixed 定位的元素和其他元素重叠。")]),t._v(" "),a("p",[a("strong",[t._v("相对定位 relative")]),t._v("： 如果对一个元素进行相对定位，它将出现在它所在的位置上。然后，可以通过设置垂直 或水平位置，让这个元素“相对于”它的起点进行移动。 在使用相对定位时，无论是 否进行移动，元素仍然占据原来的空间。因此，移动元素会导致它覆盖其它框。")]),t._v(" "),a("p",[a("strong",[t._v("绝对定位 absolute")]),t._v("： 绝对定位的元素的位置相对于最近的已定位父元素，如果元素没有已定位的父元素，那 么它的位置相对于。absolute 定位使元素的位置与文档流无关，因此不占据空间。 absolute 定位的元素和其他元素重叠。")]),t._v(" "),a("p",[a("strong",[t._v("粘性定位 sticky")]),t._v("： 元素先按照普通文档流定位，然后相对于该元素在流中的 flow root（BFC）和 containing block（最近的块级祖先元素）定位。而后，元素定位表现为在跨越特定阈值前为相对定 位，之后为固定定位。")]),t._v(" "),a("p",[a("strong",[t._v("默认定位 Static")]),t._v("： 默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right 或者 z-index 声 明）。 inherit: 规定应该从父元素继承 position 属性的值。")]),t._v(" "),a("h2",{attrs:{id:"box-sizing属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#box-sizing属性"}},[t._v("#")]),t._v(" box-sizing属性")]),t._v(" "),a("p",[t._v("box-sizing 规定两个并排的带边框的框，语法为 box-sizing：content-box/border-box/inherit")]),t._v(" "),a("p",[a("strong",[t._v("content-box")]),t._v("：宽度和高度分别应用到元素的内容框，在宽度和高度之外绘制元素的内边距和边框。【标准盒子模型】")]),t._v(" "),a("p",[a("strong",[t._v("border-box")]),t._v("：为元素设定的宽度和高度决定了元素的边框盒。【IE 盒子模型】")]),t._v(" "),a("p",[a("strong",[t._v("inherit")]),t._v("：继承父元素的 box-sizing 值。")]),t._v(" "),a("h2",{attrs:{id:"css-盒子模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#css-盒子模型"}},[t._v("#")]),t._v(" CSS 盒子模型")]),t._v(" "),a("p",[t._v("CSS 盒模型本质上是一个盒子，它包括：边距，边框，填充和实际内容。CSS 中的盒子模型包括 IE 盒子模型和标准的 W3C 盒子模型。\n在标准的盒子模型中，"),a("code",[t._v("width 指 content 部分的宽度")]),t._v("。\n在 IE 盒子模型中，"),a("code",[t._v("width 表示 content+padding+border 这三个部分的宽度")]),t._v("。")]),t._v(" "),a("p",[t._v("故在计算盒子的宽度时存在差异：")]),t._v(" "),a("p",[a("strong",[t._v("标准盒模型：")]),t._v(" 一个块的总宽度 = width+margin(左右)+padding(左右)+border(左右)")]),t._v(" "),a("p",[a("strong",[t._v("怪异盒模型：")]),t._v(" 一个块的总宽度 = width+margin（左右）（既 width 已经包含了 padding 和 border 值）")]),t._v(" "),a("h2",{attrs:{id:"bfc-块级格式上下文"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bfc-块级格式上下文"}},[t._v("#")]),t._v(" BFC（块级格式上下文）")]),t._v(" "),a("p",[a("strong",[t._v("BFC的概念")])]),t._v(" "),a("p",[a("code",[t._v("BFC")]),t._v(" 是 "),a("code",[t._v("Block Formatting Context")]),t._v("的缩写，即块级格式化上下文。"),a("code",[t._v("BFC")]),t._v("是CSS布局的一个概念，是一个独立的渲染区域，规定了内部box如何布局， 并且这个区域的子元素不会影响到外面的元素，其中比较重要的布局规则有内部 box 垂直放置，计算 BFC 的高度的时候，浮动元素也参与计算。")]),t._v(" "),a("p",[a("strong",[t._v("BFC的原理布局规则")])]),t._v(" "),a("ul",[a("li",[t._v("内部的Box会在"),a("code",[t._v("垂直方向")]),t._v("，一个接一个地放置")]),t._v(" "),a("li",[t._v("Box"),a("code",[t._v("垂直方向的距离由margin决定")]),t._v("。属于同一个BFC的两个相邻Box的margin会发生重叠")]),t._v(" "),a("li",[t._v("每个元素的margin box的左边， 与包含块border box的左边相接触(对于从左往右的格式化，否则相反")]),t._v(" "),a("li",[t._v("BFC的区域"),a("code",[t._v("不会与float box重叠")])]),t._v(" "),a("li",[t._v("BFC是一个独立容器，容器里面的"),a("code",[t._v("子元素不会影响到外面的元素")])]),t._v(" "),a("li",[t._v("计算BFC的高度时，"),a("code",[t._v("浮动元素也参与计算高度")])]),t._v(" "),a("li",[t._v("元素的类型和"),a("code",[t._v("display属性，决定了这个Box的类型")]),t._v("。不同类型的Box会参与不同的"),a("code",[t._v("Formatting Context")]),t._v("。")])]),t._v(" "),a("p",[a("strong",[t._v("如何创建BFC？")])]),t._v(" "),a("ul",[a("li",[t._v("根元素，即HTML元素")]),t._v(" "),a("li",[t._v("float的值不为none")]),t._v(" "),a("li",[t._v("position为absolute或fixed")]),t._v(" "),a("li",[t._v("display的值为inline-block、table-cell、table-caption")]),t._v(" "),a("li",[t._v("overflow的值不为visible")])]),t._v(" "),a("p",[a("strong",[t._v("BFC的使用场景")])]),t._v(" "),a("ul",[a("li",[t._v("去除边距重叠现象")]),t._v(" "),a("li",[t._v("清除浮动（让父元素的高度包含子浮动元素）")]),t._v(" "),a("li",[t._v("避免某元素被浮动元素覆盖")]),t._v(" "),a("li",[t._v("避免多列布局由于宽度计算四舍五入而自动换行")])]),t._v(" "),a("h2",{attrs:{id:"让一个元素水平垂直居中"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#让一个元素水平垂直居中"}},[t._v("#")]),t._v(" 让一个元素水平垂直居中")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("水平居中")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("对于 行内元素 : "),a("code",[t._v("text-align: center")]),t._v(";")])]),t._v(" "),a("li",[a("p",[t._v("对于确定宽度的块级元素：")]),t._v(" "),a("p",[t._v("（1）width和margin实现。"),a("code",[t._v("margin: 0 auto")]),t._v(";")]),t._v(" "),a("p",[t._v("（2）绝对定位和margin-left: -width/2, 前提是父元素position: relative")])]),t._v(" "),a("li",[a("p",[t._v("对于宽度未知的块级元素")]),t._v(" "),a("p",[t._v("（1）"),a("code",[t._v("table标签配合margin左右auto实现水平居中")]),t._v("。使用table标签（或直接将块级元素设值为 display:table），再通过给该标签添加左右margin为auto。")]),t._v(" "),a("p",[t._v("（2）inline-block实现水平居中方法。display：inline-block和text-align:center实现水平居中。")]),t._v(" "),a("p",[t._v("（3）"),a("code",[t._v("绝对定位+transform")]),t._v("，translateX可以移动本身元素的50%。")]),t._v(" "),a("p",[t._v("（4）flex布局使用"),a("code",[t._v("justify-content:center")])])])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("垂直居中")])]),t._v(" "),a("ol",[a("li",[t._v("利用 "),a("code",[t._v("line-height")]),t._v(" 实现居中，这种方法适合纯文字类")]),t._v(" "),a("li",[t._v("通过设置父容器 相对定位 ，子级设置 "),a("code",[t._v("绝对定位")]),t._v("，标签通过margin实现自适应居中")]),t._v(" "),a("li",[t._v("弹性布局 flex :父级设置display: flex; 子级设置margin为auto实现自适应居中")]),t._v(" "),a("li",[t._v("父级设置相对定位，子级设置绝对定位，并且通过位移 transform 实现")]),t._v(" "),a("li",[a("code",[t._v("table 布局")]),t._v("，父级通过转换成表格形式，"),a("code",[t._v("然后子级设置 vertical-align 实现")]),t._v("。（需要注意的是：vertical-align: middle使用的前提条件是内联元素以及display值为table-cell的元素）。")])])])]),t._v(" "),a("p",[t._v("传送门 ☞ "),a("a",{attrs:{href:"https://juejin.cn/post/7008348524530106381",target:"_blank",rel:"noopener noreferrer"}},[t._v("# 图解CSS水平垂直居中常见面试方法"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"隐藏页面中某个元素的方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#隐藏页面中某个元素的方法"}},[t._v("#")]),t._v(" 隐藏页面中某个元素的方法")]),t._v(" "),a("p",[t._v("1."),a("code",[t._v("opacity：0")]),t._v("，该元素隐藏起来了，但不会改变页面布局，并且，如果该元素已经绑定 一些事件，如click 事件，那么点击该区域，也能触发点击事件的")]),t._v(" "),a("p",[t._v("2."),a("code",[t._v("visibility：hidden")]),t._v("，该元素隐藏起来了，但不会改变页面布局，但是不会触发该元素已 经绑定的事件 ，隐藏对应元素，在文档布局中仍保留原来的空间（重绘）")]),t._v(" "),a("p",[t._v("3."),a("code",[t._v("display：none")]),t._v("，把元素隐藏起来，并且会改变页面布局，可以理解成在页面中把该元素。 不显示对应的元素，在文档布局中不再分配空间（回流+重绘）")]),t._v(" "),a("blockquote",[a("p",[t._v("该问题会引出 回流和重绘")])]),t._v(" "),a("h2",{attrs:{id:"用css实现三角符号"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用css实现三角符号"}},[t._v("#")]),t._v(" 用CSS实现三角符号")]),t._v(" "),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*记忆口诀：盒子宽高均为零，三面边框皆透明。 */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token selector"}},[t._v("div:after")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("position")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" absolute"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("width")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 0px"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("height")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 0px"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("content")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('" "')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("border-right")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 100px solid transparent"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("border-top")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 100px solid #ff0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("border-left")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 100px solid transparent"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("border-bottom")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 100px solid transparent"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n复制代码\n")])])]),a("h2",{attrs:{id:"页面布局"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#页面布局"}},[t._v("#")]),t._v(" 页面布局")]),t._v(" "),a("h3",{attrs:{id:"_1-flex-布局"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-flex-布局"}},[t._v("#")]),t._v(" 1. Flex 布局")]),t._v(" "),a("p",[t._v("布局的传统解决方案，基于盒状模型，依赖 display 属性 + position 属性 + float 属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。")]),t._v(" "),a("p",[t._v('Flex 是 Flexible Box 的缩写，意为"弹性布局",用来为盒状模型提供最大的灵活性。指定容器 display: flex 即可。 简单的分为容器属性和元素属性。')]),t._v(" "),a("p",[t._v("容器的属性：")]),t._v(" "),a("ul",[a("li",[t._v("flex-direction：决定主轴的方向（即子 item 的排列方法）flex-direction: row | row-reverse | column | column-reverse;")]),t._v(" "),a("li",[t._v("flex-wrap：决定换行规则 flex-wrap: nowrap | wrap | wrap-reverse;")]),t._v(" "),a("li",[t._v("flex-flow： .box { flex-flow: || ; }")]),t._v(" "),a("li",[t._v("justify-content：对其方式，水平主轴对齐方式")]),t._v(" "),a("li",[t._v("align-items：对齐方式，竖直轴线方向")]),t._v(" "),a("li",[t._v("align-content")])]),t._v(" "),a("p",[t._v("项目的属性（元素的属性）：")]),t._v(" "),a("ul",[a("li",[t._v("order 属性：定义项目的排列顺序，顺序越小，排列越靠前，默认为 0")]),t._v(" "),a("li",[t._v("flex-grow 属性：定义项目的放大比例，即使存在空间，也不会放大")]),t._v(" "),a("li",[t._v("flex-shrink 属性：定义了项目的缩小比例，当空间不足的情况下会等比例的缩小，如果 定义个 item 的 flow-shrink 为 0，则为不缩小")]),t._v(" "),a("li",[t._v("flex-basis 属性：定义了在分配多余的空间，项目占据的空间。")]),t._v(" "),a("li",[t._v("flex：是 flex-grow 和 flex-shrink、flex-basis 的简写，默认值为 0 1 auto。")]),t._v(" "),a("li",[t._v("align-self：允许单个项目与其他项目不一样的对齐方式，可以覆盖")]),t._v(" "),a("li",[t._v("align-items，默认属 性为 auto，表示继承父元素的 align-items 比如说，用 flex 实现圣杯布局")])]),t._v(" "),a("h3",{attrs:{id:"_2-rem-布局"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-rem-布局"}},[t._v("#")]),t._v(" 2. Rem 布局")]),t._v(" "),a("p",[t._v("首先 Rem 相对于根(html)的 font-size 大小来计算。简单的说它就是一个相对单例 如:font-size:10px;,那么（1rem = 10px）了解计算原理后首先解决怎么在不同设备上设置 html 的 font-size 大小。其实 rem 布局的本质是等比缩放，一般是基于宽度。")]),t._v(" "),a("p",[a("strong",[t._v("优点")]),t._v("：可以快速适用移动端布局，字体，图片高度")]),t._v(" "),a("p",[a("strong",[t._v("缺点")]),t._v("：")]),t._v(" "),a("p",[t._v("①目前 ie 不支持，对 pc 页面来讲使用次数不多；\n②数据量大：所有的图片，盒子都需要我们去给一个准确的值；才能保证不同机型的适配；\n③在响应式布局中，必须通过 js 来动态控制根元素 font-size 的大小。也就是说 css 样式和 js 代码有一定的耦合性。且必须将改变 font-size 的代码放在 css 样式之前。")]),t._v(" "),a("h3",{attrs:{id:"_3-百分比布局"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-百分比布局"}},[t._v("#")]),t._v(" 3. 百分比布局")]),t._v(" "),a("p",[t._v('通过百分比单位 " % " 来实现响应式的效果。通过百分比单位可以使得浏览器中的组件的宽和高随着浏览器的变化而变化，从而实现响应式的效果。 直观的理解，我们可能会认为子元素的百分比完全相对于直接父元素，height 百分比相 对于 height，width 百分比相对于 width。 padding、border、margin 等等不论是垂直方向还是水平方向，都相对于直接父元素的 width。 除了 border-radius 外，还有比如 translate、background-size 等都是相对于自身的。')]),t._v(" "),a("p",[a("strong",[t._v("缺点")]),t._v("：")]),t._v(" "),a("p",[t._v("（1）计算困难\n（2）各个属性中如果使用百分比，相对父元素的属性并不是唯一的。造成我们使用百分比单位容易使布局问题变得复杂。")]),t._v(" "),a("h3",{attrs:{id:"_4-浮动布局"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-浮动布局"}},[t._v("#")]),t._v(" 4. 浮动布局")]),t._v(" "),a("p",[t._v("浮动布局:当元素浮动以后可以向左或向右移动，直到它的外边缘碰到包含它的框或者另外一个浮动元素的边框为止。元素浮动以后会脱离正常的文档流，所以文档的普通流中的框就变的好像浮动元素不存在一样。")]),t._v(" "),a("p",[a("strong",[t._v("优点")])]),t._v(" "),a("p",[t._v("这样做的优点就是在图文混排的时候可以很好的使文字环绕在图片周围。另外当元素浮动了起来之后，它有着块级元素的一些性质例如可以设置宽高等，但它与inline-block还是有一些区别的，第一个就是关于横向排序的时候，float可以设置方向而inline-block方向是固定的；还有一个就是inline-block在使用时有时会有空白间隙的问题")]),t._v(" "),a("p",[a("strong",[t._v("缺点")])]),t._v(" "),a("p",[t._v("最明显的缺点就是浮动元素一旦脱离了文档流，就无法撑起父元素，"),a("code",[t._v("会造成父级元素高度塌陷")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"如何使用rem或viewport进行移动端适配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何使用rem或viewport进行移动端适配"}},[t._v("#")]),t._v(" 如何使用rem或viewport进行移动端适配")]),t._v(" "),a("p",[a("strong",[t._v("rem适配原理：")])]),t._v(" "),a("p",[t._v("改变了一个元素在不同设备上占据的css像素的个数")]),t._v(" "),a("p",[t._v("rem适配的优缺点")]),t._v(" "),a("ul",[a("li",[t._v("优点：没有破坏完美视口")]),t._v(" "),a("li",[t._v("缺点：px值转换rem太过于复杂(下面我们使用less来解决这个问题)")])]),t._v(" "),a("p",[a("strong",[t._v("viewport适配的原理")])]),t._v(" "),a("p",[t._v("viewport适配方案中，每一个元素在不同设备上占据的css像素的个数是一样的。但是css像素和物理像素的比例是不一样的，等比的")]),t._v(" "),a("p",[t._v("viewport适配的优缺点")]),t._v(" "),a("ul",[a("li",[t._v("在我们设计图上所量取的大小即为我们可以设置的像素大小，即所量即所设")]),t._v(" "),a("li",[t._v("缺点破坏完美视口")])]),t._v(" "),a("h2",{attrs:{id:"清除浮动的方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#清除浮动的方式"}},[t._v("#")]),t._v(" 清除浮动的方式")]),t._v(" "),a("ul",[a("li",[t._v("添加额外标签")])]),t._v(" "),a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("parent"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    //添加额外标签并且添加clear属性\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token special-attr"}},[a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("style")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),a("span",{pre:!0,attrs:{class:"token value css language-css"}},[a("span",{pre:!0,attrs:{class:"token property"}},[t._v("clear")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("both")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    //也可以加一个br标签\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n复制代码\n")])])]),a("ul",[a("li",[t._v("父级添加overflow属性，或者设置高度")]),t._v(" "),a("li",[t._v("建立伪类选择器清除浮动")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//在css中添加:after伪元素")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("parent"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("after"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 设置添加子元素的内容是空 */")]),t._v("\n    content"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 设置添加子元素为块级元素 */")]),t._v("\n    display"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" block"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 设置添加的子元素的高度0 */")]),t._v("\n    height"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 设置添加子元素看不见 */")]),t._v("\n    visibility"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" hidden"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 设置clear：both */")]),t._v("\n    clear"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" both"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n复制代码\n")])])]),a("h2",{attrs:{id:"js中的8种数据类型及区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js中的8种数据类型及区别"}},[t._v("#")]),t._v(" JS中的8种数据类型及区别")]),t._v(" "),a("p",[t._v("包括值类型(基本对象类型)和引用类型(复杂对象类型)")]),t._v(" "),a("p",[a("strong",[t._v("基本类型(值类型)：")]),t._v(" Number(数字),String(字符串),Boolean(布尔),Symbol(符号),null(空),undefined(未定义)在内存中占据固定大小，保存在栈内存中")]),t._v(" "),a("p",[a("strong",[t._v("引用类型(复杂数据类型)：")]),t._v(" Object(对象)、Function(函数)。其他还有Array(数组)、Date(日期)、RegExp(正则表达式)、特殊的基本包装类型(String、Number、Boolean) 以及单体内置对象(Global、Math)等 引用类型的值是对象 保存在堆内存中，栈内存存储的是对象的变量标识符以及对象在堆内存中的存储地址。")]),t._v(" "),a("h2",{attrs:{id:"js中的数据类型检测方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js中的数据类型检测方案"}},[t._v("#")]),t._v(" JS中的数据类型检测方案")]),t._v(" "),a("h3",{attrs:{id:"_1-typeof"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-typeof"}},[t._v("#")]),t._v(" 1.typeof")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("               "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// number")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// boolean")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'mc'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// string")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// function")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// function")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("              "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// object ")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("              "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// object")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// object")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// undefined")]),t._v("\n复制代码\n")])])]),a("p",[t._v("优点：能够快速区分基本数据类型")]),t._v(" "),a("p",[t._v("缺点：不能将Object、Array和Null区分，都返回object")]),t._v(" "),a("h3",{attrs:{id:"_2-instanceof"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-instanceof"}},[t._v("#")]),t._v(" 2.instanceof")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Boolean")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false ")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'str'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false  ")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n复制代码\n")])])]),a("p",[t._v("优点：能够区分Array、Object和Function，适合用于判断自定义的类实例对象")]),t._v(" "),a("p",[t._v("缺点：Number，Boolean，String基本数据类型不能判断")]),t._v(" "),a("h3",{attrs:{id:"_3-object-prototype-tostring-call"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-object-prototype-tostring-call"}},[t._v("#")]),t._v(" 3.Object.prototype.toString.call()")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" toString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("toString"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//[object Number]")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//[object Boolean]")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'mc'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//[object String]")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//[object Array]")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//[object Object]")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("           "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//[object Function]")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("              "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//[object Undefined]")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//[object Null]")]),t._v("\n复制代码\n")])])]),a("p",[t._v("优点：精准判断数据类型")]),t._v(" "),a("p",[t._v("缺点：写法繁琐不容易记，推荐进行封装后使用")]),t._v(" "),a("h2",{attrs:{id:"var-let-const"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#var-let-const"}},[t._v("#")]),t._v(" var && let && const")]),t._v(" "),a("p",[t._v("ES6之前创建变量用的是var,之后创建变量用的是let/const")]),t._v(" "),a("p",[a("strong",[t._v("三者区别")]),t._v("：")]),t._v(" "),a("ol",[a("li",[t._v("var定义的变量，"),a("code",[t._v("没有块的概念，可以跨块访问")]),t._v(", 不能跨函数访问。\nlet定义的变量，只能在块作用域里访问，不能跨块访问，也不能跨函数访问。\nconst用来定义常量，使用时必须初始化(即必须赋值)，只能在块作用域里访问，且不能修改。")]),t._v(" "),a("li",[t._v("var可以"),a("code",[t._v("先使用，后声明")]),t._v("，因为存在变量提升；let必须先声明后使用。")]),t._v(" "),a("li",[t._v("var是允许在相同作用域内"),a("code",[t._v("重复声明同一个变量")]),t._v("的，而let与const不允许这一现象。")]),t._v(" "),a("li",[t._v("在全局上下文中，基于let声明的全局变量和全局对象GO（window）没有任何关系 ;\nvar声明的变量会和GO有映射关系；")]),t._v(" "),a("li",[a("code",[t._v("会产生暂时性死区")]),t._v("：")])]),t._v(" "),a("blockquote",[a("p",[t._v("暂时性死区是浏览器的bug：检测一个未被声明的变量类型时，不会报错，会返回undefined\n如：console.log(typeof a) //undefined\n而：console.log(typeof a)//未声明之前不能使用\nlet a")])]),t._v(" "),a("ol",[a("li",[t._v("let /const/function会把当前所在的大括号(除函数之外)作为一个全新的块级上下文，应用这个机制，在开发项目的时候，遇到循环事件绑定等类似的需求，无需再自己构建闭包来存储，只要基于let的块作用特征即可解决")])]),t._v(" "),a("h2",{attrs:{id:"js垃圾回收机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js垃圾回收机制"}},[t._v("#")]),t._v(" JS垃圾回收机制")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("项目中，如果存在大量不被释放的内存（堆/栈/上下文），页面性能会变得很慢。当某些代码操作不能被合理释放，就会造成内存泄漏。我们尽可能减少使用闭包，因为它会消耗内存。")])]),t._v(" "),a("li",[a("p",[t._v("浏览器垃圾回收机制/内存回收机制:")]),t._v(" "),a("blockquote",[a("p",[t._v("浏览器的"),a("code",[t._v("Javascript")]),t._v("具有自动垃圾回收机制("),a("code",[t._v("GC:Garbage Collecation")]),t._v(")，垃圾收集器会定期（周期性）找出那些不在继续使用的变量，然后释放其内存。")])]),t._v(" "),a("p",[a("strong",[t._v("标记清除")]),t._v(":在"),a("code",[t._v("js")]),t._v("中，最常用的垃圾回收机制是标记清除：当变量进入执行环境时，被标记为“进入环境”，当变量离开执行环境时，会被标记为“离开环境”。垃圾回收器会销毁那些带标记的值并回收它们所占用的内存空间。\n"),a("strong",[t._v("谷歌浏览器")]),t._v("：“查找引用”，浏览器不定时去查找当前内存的引用，如果没有被占用了，浏览器会回收它；如果被占用，就不能回收。\n"),a("strong",[t._v("IE浏览器")]),t._v("：“引用计数法”，当前内存被占用一次，计数累加1次，移除占用就减1，减到0时，浏览器就回收它。")])]),t._v(" "),a("li",[a("p",[t._v("优化手段：内存优化 ; 手动释放：取消内存的占用即可。")]),t._v(" "),a("p",[t._v("（1）堆内存：fn = null 【null：空指针对象】")]),t._v(" "),a("p",[t._v("（2）栈内存：把上下文中，被外部占用的堆的占用取消即可。")])]),t._v(" "),a("li",[a("p",[t._v("内存泄漏")]),t._v(" "),a("p",[t._v("在 JS 中，常见的内存泄露主要有 4 种,全局变量、闭包、DOM 元素的引用、定时器")])])]),t._v(" "),a("h2",{attrs:{id:"作用域和作用域链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作用域和作用域链"}},[t._v("#")]),t._v(" 作用域和作用域链")]),t._v(" "),a("p",[t._v("创建函数的时候，已经声明了当前函数的作用域==>"),a("code",[t._v("当前创建函数所处的上下文")]),t._v("。如果是在全局下创建的函数就是"),a("code",[t._v("[[scope]]:EC(G)")]),t._v("，函数执行的时候，形成一个全新的私有上下文"),a("code",[t._v("EC(FN)")]),t._v("，供字符串代码执行(进栈执行)")]),t._v(" "),a("p",[t._v("定义：简单来说作用域就是变量与函数的可访问范围，"),a("code",[t._v("由当前环境与上层环境的一系列变量对象组成")]),t._v("\n1.全局作用域：代码在程序的任何地方都能被访问，window 对象的内置属性都拥有全局作用域。\n2.函数作用域：在固定的代码片段才能被访问")]),t._v(" "),a("p",[t._v("作用：作用域最大的用处就是"),a("code",[t._v("隔离变量")]),t._v("，不同作用域下同名变量不会有冲突。")]),t._v(" "),a("p",[a("strong",[t._v("作用域链参考链接")]),t._v("一般情况下，变量到 创建该变量 的函数的作用域中取值。但是如果在当前作用域中没有查到，就会向上级作用域去查，直到查到全局作用域，这么一个查找过程形成的链条就叫做作用域链。")]),t._v(" "),a("h2",{attrs:{id:"闭包的两大作用-保存-保护"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#闭包的两大作用-保存-保护"}},[t._v("#")]),t._v(" 闭包的两大作用：保存/保护")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("闭包的概念")])]),t._v(" "),a("p",[t._v("函数执行时形成的私有上下文EC(FN)，正常情况下，代码执行完会出栈后释放;但是特殊情况下，如果当前私有上下文中的某个东西被上下文以外的事物占用了，则上下文不会出栈释放，从而形成不销毁的上下文。 函数执行函数执行过程中，会形成一个全新的私有上下文，可能会被释放，可能不会被释放，不论释放与否，他的作用是：")])])]),t._v(" "),a("p",[t._v("（1）保护：划分一个独立的代码执行区域，在这个区域中有自己私有变量存储的空间，保护自己的私有变量不受外界干扰（操作自己的私有变量和外界没有关系）；")]),t._v(" "),a("p",[t._v("（2）保存：如果当前上下文不被释放【只要上下文中的某个东西被外部占用即可】，则存储的这些私有变量也不会被释放，可以供其下级上下文中调取使用，相当于把一些值保存起来了；")]),t._v(" "),a("p",[t._v("我们把函数执行形成私有上下文，来保护和保存私有变量机制称为"),a("code",[t._v("闭包")]),t._v("。")]),t._v(" "),a("blockquote",[a("p",[t._v("闭包是指有权访问另一个函数作用域中的变量的函数--《JavaScript高级程序设计》")])]),t._v(" "),a("p",[a("strong",[t._v("稍全面的回答")]),t._v("： 在js中变量的作用域属于函数作用域, 在函数执行完后,作用域就会被清理,内存也会随之被回收,但是由于闭包函数是建立在函数内部的子函数, 由于其可访问上级作用域,即使上级函数执行完, 作用域也不会随之销毁, 这时的子函数(也就是闭包),便拥有了访问上级作用域中变量的权限,即使上级函数执行完后作用域内的值也不会被销毁。")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("闭包的特性")]),t._v("：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("1、内部函数可以访问定义他们外部函数的参数和变量。(作用域链的向上查找，把外围的作用域中的变量值存储在内存中而不是在函数调用完毕后销毁)设计私有的方法和变量，避免全局变量的污染。")]),t._v(" "),a("p",[t._v("1.1.闭包是密闭的容器，，类似于set、map容器，存储数据的")]),t._v(" "),a("p",[t._v("1.2.闭包是一个对象，存放数据的格式为 key-value 形式")])]),t._v(" "),a("li",[a("p",[t._v("2、函数嵌套函数")])]),t._v(" "),a("li",[a("p",[t._v("3、本质是将函数内部和外部连接起来。优点是可以读取函数内部的变量，让这些变量的值始终保存在内存中，不会在函数被调用之后自动清除")])])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("闭包形成的条件")]),t._v("：")]),t._v(" "),a("ol",[a("li",[t._v("函数的嵌套")]),t._v(" "),a("li",[t._v("内部函数引用外部函数的局部变量，延长外部函数的变量生命周期")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("闭包的用途")]),t._v("：")]),t._v(" "),a("ol",[a("li",[t._v("模仿块级作用域")]),t._v(" "),a("li",[t._v("保护外部函数的变量 能够访问函数定义时所在的词法作用域(阻止其被回收)")]),t._v(" "),a("li",[t._v("封装私有化变量")]),t._v(" "),a("li",[t._v("创建模块")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("闭包应用场景")])]),t._v(" "),a("p",[t._v("闭包的两个场景，闭包的两大作用："),a("code",[t._v("保存/保护")]),t._v("。 在开发中, 其实我们随处可见闭包的身影, 大部分前端JavaScript 代码都是“事件驱动”的,即一个事件绑定的回调方法; 发送ajax请求成功|失败的回调;setTimeout的延时回调;或者一个函数内部返回另一个匿名函数,这些都是闭包的应用。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("闭包的优点")]),t._v("：延长局部变量的生命周期")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("闭包缺点")]),t._v("：会导致函数的变量一直保存在内存中，过多的闭包可能会导致内存泄漏")])])]),t._v(" "),a("h2",{attrs:{id:"js-中-this-的五种情况"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js-中-this-的五种情况"}},[t._v("#")]),t._v(" JS 中 this 的五种情况")]),t._v(" "),a("ol",[a("li",[t._v("作为普通函数执行时，"),a("code",[t._v("this")]),t._v("指向"),a("code",[t._v("window")]),t._v("。")]),t._v(" "),a("li",[t._v("当函数作为对象的方法被调用时，"),a("code",[t._v("this")]),t._v("就会指向"),a("code",[t._v("该对象")]),t._v("。")]),t._v(" "),a("li",[t._v("构造器调用，"),a("code",[t._v("this")]),t._v("指向"),a("code",[t._v("返回的这个对象")]),t._v("。")]),t._v(" "),a("li",[t._v("箭头函数 箭头函数的"),a("code",[t._v("this")]),t._v("绑定看的是"),a("code",[t._v("this所在函数定义在哪个对象下")]),t._v("，就绑定哪个对象。如果有嵌套的情况，则this绑定到最近的一层对象上。")]),t._v(" "),a("li",[t._v("基于Function.prototype上的 "),a("code",[t._v("apply 、 call 和 bind")]),t._v("调用模式，这三个方法都可以显示的指定调用函数的 this 指向。"),a("code",[t._v("apply")]),t._v("接收参数的是数组，"),a("code",[t._v("call")]),t._v("接受参数列表，`` bind"),a("code",[t._v("方法通过传入一个对象，返回一个")]),t._v(" this "),a("code",[t._v("绑定了传入对象的新函数。这个函数的")]),t._v("this"),a("code",[t._v("指向除了使用")]),t._v("new `时会被改变，其他情况下都不会改变。若为空默认是指向全局对象window。")])]),t._v(" "),a("h2",{attrs:{id:"原型-原型链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原型-原型链"}},[t._v("#")]),t._v(" 原型 && 原型链")]),t._v(" "),a("p",[a("strong",[t._v("原型关系：")])]),t._v(" "),a("ul",[a("li",[t._v("每个 class都有显示原型 prototype")]),t._v(" "),a("li",[t._v("每个实例都有隐式原型 "),a("em",[t._v("proto")])]),t._v(" "),a("li",[t._v("实例的_proto_指向对应 class 的 prototype")])]),t._v(" "),a("p",[t._v("‌ "),a("strong",[t._v("原型:")]),t._v("  在 JS 中，每当定义一个对象（函数也是对象）时，对象中都会包含一些预定义的属性。其中每个"),a("code",[t._v("函数对象")]),t._v("都有一个"),a("code",[t._v("prototype")]),t._v(" 属性，这个属性指向函数的"),a("code",[t._v("原型对象")]),t._v("。")]),t._v(" "),a("p",[t._v("原型链：函数的原型链对象constructor默认指向函数本身，原型对象除了有原型属性外，为了实现继承，还有一个原型链指针__proto__,该指针是指向上一层的原型对象，而上一层的原型对象的结构依然类似。因此可以利用__proto__一直指向Object的原型对象上，而Object原型对象用Object.prototype."),a("strong",[t._v("proto")]),t._v(" = null表示原型链顶端。如此形成了js的原型链继承。同时所有的js对象都有Object的基本防范")]),t._v(" "),a("p",[a("strong",[t._v("特点:")]),t._v(" "),a("code",[t._v("JavaScript")]),t._v("对象是通过引用来传递的，我们创建的每个新对象实体中并没有一份属于自己的原型副本。当我们修改原型时，与之相关的对象也会继承这一改变。")]),t._v(" "),a("h2",{attrs:{id:"new运算符的实现机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#new运算符的实现机制"}},[t._v("#")]),t._v(" new运算符的实现机制")]),t._v(" "),a("ol",[a("li",[t._v("首先创建了一个新的"),a("code",[t._v("空对象")])]),t._v(" "),a("li",[a("code",[t._v("设置原型")]),t._v("，将对象的原型设置为函数的"),a("code",[t._v("prototype")]),t._v("对象。")]),t._v(" "),a("li",[t._v("让函数的"),a("code",[t._v("this")]),t._v("指向这个对象，执行构造函数的代码（为这个新对象添加属性）")]),t._v(" "),a("li",[t._v("判断函数的返回值类型，如果是值类型，返回创建的对象。如果是引用类型，就返回这个引用类型的对象。")])]),t._v(" "),a("h2",{attrs:{id:"eventloop-事件循环"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#eventloop-事件循环"}},[t._v("#")]),t._v(" EventLoop 事件循环")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("JS`是单线程的，为了防止一个函数执行时间过长阻塞后面的代码，所以会先将同步代码压入执行栈中，依次执行，将异步代码推入异步队列，异步队列又分为宏任务队列和微任务队列，因为宏任务队列的执行时间较长，所以微任务队列要优先于宏任务队列。微任务队列的代表就是，`Promise.then`，`MutationObserver`，宏任务的话就是`setImmediate setTimeout setInterval\n")])])]),a("p",[t._v("JS运行的环境。一般为浏览器或者Node。 在浏览器环境中，有JS 引擎线程和渲染线程，且两个线程互斥。 Node环境中，只有JS 线程。 不同环境执行机制有差异，不同任务进入不同Event Queue队列。 当主程结束，先执行准备好微任务，然后再执行准备好的宏任务，一个轮询结束。")]),t._v(" "),a("h3",{attrs:{id:"浏览器中的事件环-event-loop"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器中的事件环-event-loop"}},[t._v("#")]),t._v(" "),a("strong",[t._v("浏览器中的事件环（Event Loop)")])]),t._v(" "),a("p",[t._v("事件环的运行机制是，先会执行栈中的内容，栈中的内容执行后执行微任务，微任务清空后再执行宏任务，先取出一个宏任务，再去执行微任务，然后在取宏任务清微任务这样不停的循环。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("eventLoop 是由JS的宿主环境（浏览器）来实现的；")])]),t._v(" "),a("li",[a("p",[t._v("事件循环可以简单的描述为以下四个步骤:")]),t._v(" "),a("ol",[a("li",[t._v("函数入栈，当Stack中执行到异步任务的时候，就将他丢给WebAPIs,接着执行同步任务,直到Stack为空；")]),t._v(" "),a("li",[t._v("此期间WebAPIs完成这个事件，把回调函数放入队列中等待执行（微任务放到微任务队列，宏任务放到宏任务队列）")]),t._v(" "),a("li",[t._v("执行栈为空时，Event Loop把微任务队列执行清空；")]),t._v(" "),a("li",[t._v("微任务队列清空后，进入宏任务队列，取队列的第一项任务放入Stack(栈）中执行，执行完成后，查看微任务队列是否有任务，有的话，清空微任务队列。重复4，继续从宏任务中取任务执行，执行完成之后，继续清空微任务，如此反复循环，直至清空所有的任务。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/342e581223d2471d9484fc48beb9f8e1~tplv-k3u1fbpfcp-watermark.awebp",alt:"事件循环流程"}})])]),t._v(" "),a("li",[a("p",[t._v("浏览器中的任务源(task):")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("宏任务(macrotask)")]),t._v("：\n宿主环境提供的，比如浏览器\najax、setTimeout、setInterval、setTmmediate(只兼容ie)、script、requestAnimationFrame、messageChannel、UI渲染、一些浏览器api")]),t._v(" "),a("li",[a("code",[t._v("微任务(microtask)")]),t._v("：\n语言本身提供的，比如promise.then\nthen、queueMicrotask(基于then)、mutationObserver(浏览器提供)、messageChannel 、mutationObersve")])])])]),t._v(" "),a("h3",{attrs:{id:"node-环境中的事件环-event-loop"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-环境中的事件环-event-loop"}},[t._v("#")]),t._v(" "),a("strong",[t._v("Node 环境中的事件环（Event Loop)")])]),t._v(" "),a("p",[a("code",[t._v("Node")]),t._v("是基于V8引擎的运行在服务端的"),a("code",[t._v("JavaScript")]),t._v("运行环境，在处理高并发、I/O密集(文件操作、网络操作、数据库操作等)场景有明显的优势。虽然用到也是V8引擎，但由于服务目的和环境不同，导致了它的API与原生JS有些区别，其Event Loop还要处理一些I/O，比如新的网络连接等，所以Node的Event Loop(事件环机制)与浏览器的是不太一样。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e362c1770f62428fbf3faabd99d2a64c~tplv-k3u1fbpfcp-watermark.awebp",alt:"2020120317343116.png"}}),t._v(" 执行顺序如下：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("timers")]),t._v(": 计时器，执行setTimeout和setInterval的回调")]),t._v(" "),a("li",[a("code",[t._v("pending callbacks")]),t._v(": 执行延迟到下一个循环迭代的 I/O 回调")]),t._v(" "),a("li",[a("code",[t._v("idle, prepare")]),t._v(": 队列的移动，仅系统内部使用")]),t._v(" "),a("li",[a("code",[t._v("poll轮询")]),t._v(": 检索新的 I/O 事件;执行与 I/O 相关的回调。事实上除了其他几个阶段处理的事情，其他几乎所有的异步都在这个阶段处理。")]),t._v(" "),a("li",[a("code",[t._v("check")]),t._v(": 执行"),a("code",[t._v("setImmediate")]),t._v("回调，setImmediate在这里执行")]),t._v(" "),a("li",[a("code",[t._v("close callbacks")]),t._v(": 执行"),a("code",[t._v("close")]),t._v("事件的"),a("code",[t._v("callback")]),t._v("，一些关闭的回调函数，如：socket.on('close', ...)")])]),t._v(" "),a("h2",{attrs:{id:"settimeout、promise、async-await-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#settimeout、promise、async-await-的区别"}},[t._v("#")]),t._v(" setTimeout、Promise、Async/Await 的区别")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("setTimeout")]),t._v(" "),a("p",[t._v("settimeout的回调函数放到宏任务队列里，等到执行栈清空以后执行。")])]),t._v(" "),a("li",[a("p",[t._v("Promise")]),t._v(" "),a("p",[t._v("Promise本身是"),a("strong",[t._v("同步的立即执行函数")]),t._v("， 当在executor中执行resolve或者reject的时候, 此时是异步操作， 会先执行then/catch等，当主栈完成后，才会去调用resolve/reject中存放的方法执行。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'script start'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" promise1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Promise")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("resolve")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'promise1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'promise1 end'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'promise2'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'settimeout'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'script end'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出顺序: script start->promise1->promise1 end->script end->promise2->settimeout")]),t._v("\n复制代码\n")])])])]),t._v(" "),a("li",[a("p",[t._v("async/await")]),t._v(" "),a("p",[t._v("async 函数返回一个 Promise 对象，当函数执行的时候，一旦遇到 await 就会先返回，等到触发的异步操作完成，再执行函数体内后面的语句。可以理解为，是让出了线程，跳出了 async 函数体。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("async1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'async1 start'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("async2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'async1 end'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("async2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'async2'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'script start'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("async1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'script end'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出顺序：script start->async1 start->async2->script end->async1 end")]),t._v("\n复制代码\n")])])])])]),t._v(" "),a("h2",{attrs:{id:"async-await-如何通过同步的方式实现异步"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#async-await-如何通过同步的方式实现异步"}},[t._v("#")]),t._v(" Async/Await 如何通过同步的方式实现异步")]),t._v(" "),a("p",[t._v("Async/Await就是一个"),a("strong",[t._v("自执行")]),t._v("的generate函数。利用generate函数的特性把异步的代码写成“同步”的形式,第一个请求的返回值作为后面一个请求的参数,其中每一个参数都是一个promise对象.")]),t._v(" "),a("h2",{attrs:{id:"介绍节流防抖原理、区别以及应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#介绍节流防抖原理、区别以及应用"}},[t._v("#")]),t._v(" 介绍节流防抖原理、区别以及应用")]),t._v(" "),a("p",[a("code",[t._v("节流")]),t._v("：事件触发后，规定时间内，事件处理函数不能再次被调用。也就是说在规定的时间内，函数只能被调用一次，且是最先被触发调用的那次。")]),t._v(" "),a("p",[a("code",[t._v("防抖")]),t._v("：多次触发事件，事件处理函数只能执行一次，并且是在触发操作结束时执行。也就是说，当一个事件被触发准备执行事件函数前，会等待一定的时间（这时间是码农自己去定义的，比如 1 秒），如果没有再次被触发，那么就执行，如果被触发了，那就本次作废，重新从新触发的时间开始计算，并再次等待 1 秒，直到能最终执行！")]),t._v(" "),a("p",[a("code",[t._v("使用场景")]),t._v("：\n节流：滚动加载更多、搜索框搜的索联想功能、高频点击、表单重复提交……\n防抖：搜索框搜索输入，并在输入完以后自动搜索、手机号，邮箱验证输入检测、窗口大小 resize 变化后，再重新渲染。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * 节流函数 一个函数执行一次后，只有大于设定的执行周期才会执行第二次。有个需要频繁触发的函数，出于优化性能的角度，在规定时间内，只让函数触发的第一次生效，后面的不生效。\n * @param fn要被节流的函数\n * @param delay规定的时间\n */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("throttle")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("fn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" delay")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//记录上一次函数触发的时间")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" lastTime "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//记录当前函数触发的时间")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" nowTime "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Date"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("now")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nowTime "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" lastTime "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" delay"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//修正this指向问题")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//同步执行结束时间")]),t._v("\n            lastTime "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nowTime"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\ndocument"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("onscroll "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("throttle")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'scllor事件被触发了'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" Date"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("now")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * 防抖函数  一个需要频繁触发的函数，在规定时间内，只让最后一次生效，前面的不生效\n * @param fn要被节流的函数\n * @param delay规定的时间\n */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("debounce")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("fn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" delay")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//记录上一次的延时器")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" timer "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//清除上一次的演示器")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("clearTimeout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("timer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//重新设置新的延时器")]),t._v("\n        timer "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//修正this指向问题")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("apply")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" delay"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\ndocument"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'btn'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("onclick "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("debounce")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'按钮被点击了'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" Date"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("now")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n复制代码\n")])])]),a("h2",{attrs:{id:"简述mvvm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简述mvvm"}},[t._v("#")]),t._v(" 简述MVVM")]),t._v(" "),a("p",[a("strong",[t._v("什么是MVVM？")])]),t._v(" "),a("p",[a("code",[t._v("视图模型双向绑定")]),t._v("，是"),a("code",[t._v("Model-View-ViewModel")]),t._v("的缩写，也就是把"),a("code",[t._v("MVC")]),t._v("中的"),a("code",[t._v("Controller")]),t._v("演变成"),a("code",[t._v("ViewModel。Model")]),t._v("层代表数据模型，"),a("code",[t._v("View")]),t._v("代表UI组件，"),a("code",[t._v("ViewModel")]),t._v("是"),a("code",[t._v("View")]),t._v("和"),a("code",[t._v("Model")]),t._v("层的桥梁，数据会绑定到"),a("code",[t._v("viewModel")]),t._v("层并自动将数据渲染到页面中，视图变化的时候会通知"),a("code",[t._v("viewModel")]),t._v("层更新数据。以前是操作DOM结构更新视图，现在是"),a("code",[t._v("数据驱动视图")]),t._v("。")]),t._v(" "),a("p",[a("strong",[t._v("MVVM的优点：")])]),t._v(" "),a("p",[t._v("1."),a("code",[t._v("低耦合")]),t._v("。视图（View）可以独立于Model变化和修改，一个Model可以绑定到不同的View上，当View变化的时候Model可以不变化，当Model变化的时候View也可以不变；\n2."),a("code",[t._v("可重用性")]),t._v("。你可以把一些视图逻辑放在一个Model里面，让很多View重用这段视图逻辑。\n3."),a("code",[t._v("独立开发")]),t._v("。开发人员可以专注于业务逻辑和数据的开发(ViewModel)，设计人员可以专注于页面设计。\n4."),a("code",[t._v("可测试")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"vue底层实现原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue底层实现原理"}},[t._v("#")]),t._v(" Vue底层实现原理")]),t._v(" "),a("p",[t._v("vue.js是采用数据劫持结合发布者-订阅者模式的方式，通过Object.defineProperty()来劫持各个属性的setter和getter，在数据变动时发布消息给订阅者，触发相应的监听回调\nVue是一个典型的MVVM框架，模型（Model）只是普通的javascript对象，修改它则试图（View）会自动更新。这种设计让状态管理变得非常简单而直观")]),t._v(" "),a("p",[a("strong",[t._v("Observer（数据监听器）")]),t._v(" : Observer的核心是通过Object.defineProprtty()来监听数据的变动，这个函数内部可以定义setter和getter，每当数据发生变化，就会触发setter。这时候Observer就要通知订阅者，订阅者就是Watcher")]),t._v(" "),a("p",[a("strong",[t._v("Watcher（订阅者）")]),t._v(" : Watcher订阅者作为Observer和Compile之间通信的桥梁，主要做的事情是：")]),t._v(" "),a("ol",[a("li",[t._v("在自身实例化时往属性订阅器(dep)里面添加自己")]),t._v(" "),a("li",[t._v("自身必须有一个update()方法")]),t._v(" "),a("li",[t._v("待属性变动dep.notice()通知时，能调用自身的update()方法，并触发Compile中绑定的回调")])]),t._v(" "),a("p",[a("strong",[t._v("Compile（指令解析器）")]),t._v(" : Compile主要做的事情是解析模板指令，将模板中变量替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加鉴定数据的订阅者，一旦数据有变动，收到通知，更新试图")]),t._v(" "),a("h2",{attrs:{id:"谈谈对vue生命周期的理解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#谈谈对vue生命周期的理解"}},[t._v("#")]),t._v(" 谈谈对vue生命周期的理解？")]),t._v(" "),a("p",[t._v("每个"),a("code",[t._v("Vue")]),t._v("实例在创建时都会经过一系列的初始化过程，"),a("code",[t._v("vue")]),t._v("的生命周期钩子，就是说在达到某一阶段或条件时去触发的函数，目的就是为了完成一些动作或者事件")]),t._v(" "),a("h3",{attrs:{id:"_1-页面生命周期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-页面生命周期"}},[t._v("#")]),t._v(" 1. 页面生命周期")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("create阶段")]),t._v("：vue实例被创建\n"),a("code",[t._v("beforeCreate")]),t._v(": 创建前，此时data和methods中的数据都还没有初始化\n"),a("code",[t._v("created")]),t._v("： 创建完毕，data中有值，未挂载")]),t._v(" "),a("li",[a("code",[t._v("mount阶段")]),t._v("： vue实例被挂载到真实DOM节点\n"),a("code",[t._v("beforeMount")]),t._v("：可以发起服务端请求，去数据\n"),a("code",[t._v("mounted")]),t._v(": 此时可以操作DOM")]),t._v(" "),a("li",[a("code",[t._v("update阶段")]),t._v("：当vue实例里面的data数据变化时，触发组件的重新渲染\n"),a("code",[t._v("beforeUpdate")]),t._v(" :更新前\n"),a("code",[t._v("updated")]),t._v("：更新后")]),t._v(" "),a("li",[a("code",[t._v("destroy阶段")]),t._v("：vue实例被销毁\n"),a("code",[t._v("beforeDestroy")]),t._v("：实例被销毁前，此时可以手动销毁一些方法\n"),a("code",[t._v("destroyed")]),t._v(":销毁后")])]),t._v(" "),a("h3",{attrs:{id:"_2-组件生命周期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-组件生命周期"}},[t._v("#")]),t._v(" 2. 组件生命周期")]),t._v(" "),a("p",[t._v("生命周期（父子组件） 父组件beforeCreate --\x3e 父组件created --\x3e 父组件beforeMount --\x3e 子组件beforeCreate --\x3e 子组件created --\x3e 子组件beforeMount --\x3e 子组件 mounted --\x3e 父组件mounted --\x3e父组件beforeUpdate --\x3e子组件beforeDestroy--\x3e 子组件destroyed --\x3e 父组件updated")]),t._v(" "),a("p",[a("strong",[t._v("加载渲染过程")]),t._v(" 父beforeCreate->父created->父beforeMount->子beforeCreate->子created->子beforeMount->子mounted->父mounted")]),t._v(" "),a("p",[a("strong",[t._v("挂载阶段")]),t._v(" 父created->子created->子mounted->父mounted")]),t._v(" "),a("p",[a("strong",[t._v("父组件更新阶段")]),t._v(" 父beforeUpdate->父updated")]),t._v(" "),a("p",[a("strong",[t._v("子组件更新阶段")]),t._v(" 父beforeUpdate->子beforeUpdate->子updated->父updated")]),t._v(" "),a("p",[a("strong",[t._v("销毁阶段")]),t._v(" 父beforeDestroy->子beforeDestroy->子destroyed->父destroyed")]),t._v(" "),a("h2",{attrs:{id:"vue中computed与watch区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue中computed与watch区别"}},[t._v("#")]),t._v(" Vue中computed与watch区别")]),t._v(" "),a("p",[t._v("通俗来讲，既能用 computed 实现又可以用 watch 监听来实现的功能，推荐用 computed， 重点在于 computed 的缓存功能 computed 计算属性是用来声明式的描述一个值依赖了其它的值，当所依赖的值或者变量 改变时，计算属性也会跟着改变； watch 监听的是已经在 data 中定义的变量，当该变量变化时，会触发 watch 中的方法。")]),t._v(" "),a("p",[a("strong",[t._v("watch 属性监听")]),t._v(" 是一个对象，键是需要观察的属性，值是对应回调函数，主要用来监听某些特定数据的变化，从而进行某些具体的业务逻辑操作,监听属性的变化，需要在数据变化时执行异步或开销较大的操作时使用")]),t._v(" "),a("p",[a("strong",[t._v("computed 计算属性")]),t._v(" 属性的结果会被"),a("code",[t._v("缓存")]),t._v("，当"),a("code",[t._v("computed")]),t._v("中的函数所依赖的属性没有发生改变的时候，那么调用当前函数的时候结果会从缓存中读取。除非依赖的响应式属性变化时才会重新计算，主要当做属性来使用 "),a("code",[t._v("computed")]),t._v("中的函数必须用"),a("code",[t._v("return")]),t._v("返回最终的结果 "),a("code",[t._v("computed")]),t._v("更高效，优先使用。"),a("code",[t._v("data 不改变，computed 不更新。")])]),t._v(" "),a("p",[a("strong",[t._v("使用场景")]),t._v(" "),a("code",[t._v("computed")]),t._v("：当一个属性受多个属性影响的时候使用，例：购物车商品结算功能 "),a("code",[t._v("watch")]),t._v("：当一条数据影响多条数据的时候使用，例：搜索数据")]),t._v(" "),a("h3",{attrs:{id:"vue组件中的data为什么是一个函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue组件中的data为什么是一个函数"}},[t._v("#")]),t._v(" Vue组件中的data为什么是一个函数？")]),t._v(" "),a("ol",[a("li",[t._v("一个组件被复用多次的话，也就会创建多个实例。本质上，这些实例用的都是同一个构造函数。")]),t._v(" "),a("li",[t._v("如果data是对象的话，对象属于引用类型，会影响到所有的实例。所以为了保证组件不同的实例之间data不冲突，data必须是一个函数。")])]),t._v(" "),a("h3",{attrs:{id:"vue中为什么v-for和v-if不建议用在一起"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue中为什么v-for和v-if不建议用在一起"}},[t._v("#")]),t._v(" Vue中为什么v-for和v-if不建议用在一起")]),t._v(" "),a("ol",[a("li",[t._v("当 v-for 和 v-if 处于同一个节点时，v-for 的优先级比 v-if 更高，这意味着 v-if 将分别重复运行于每个 v-for 循环中。如果要遍历的数组很大，而真正要展示的数据很少时，这将造成很大的性能浪费")]),t._v(" "),a("li",[t._v("这种场景建议使用 computed，先对数据进行过滤")])]),t._v(" "),a("h2",{attrs:{id:"react-vue-项目中-key-的作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react-vue-项目中-key-的作用"}},[t._v("#")]),t._v(" React/Vue 项目中 key 的作用")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("key的作用是为了在diff算法执行时更快的找到对应的节点，"),a("code",[t._v("提高diff速度，更高效的更新虚拟DOM")]),t._v(";")]),t._v(" "),a("p",[t._v("vue和react都是采用diff算法来对比新旧虚拟节点，从而更新节点。在vue的diff函数中，会根据新节点的key去对比旧节点数组中的key，从而找到相应旧节点。如果没找到就认为是一个新增节点。而如果没有key，那么就会采用遍历查找的方式去找到对应的旧节点。一种一个map映射，另一种是遍历查找。相比而言。map映射的速度更快。")])]),t._v(" "),a("li",[a("p",[t._v("为了在数据变化时强制更新组件，以避免"),a("code",[t._v("“就地复用”")]),t._v("带来的副作用。")]),t._v(" "),a("p",[t._v("当 Vue.js 用 "),a("code",[t._v("v-for")]),t._v(" 更新已渲染过的元素列表时，它默认用“就地复用”策略。如果数据项的顺序被改变，Vue 将不会移动 DOM 元素来匹配数据项的顺序，而是简单复用此处每个元素，并且确保它在特定索引下显示已被渲染过的每个元素。重复的key会造成渲染错误。")])])]),t._v(" "),a("h2",{attrs:{id:"vue组件的通信方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue组件的通信方式"}},[t._v("#")]),t._v(" Vue组件的通信方式")]),t._v(" "),a("ul",[a("li",[a("p",[a("code",[t._v("props")]),t._v("/"),a("code",[t._v("$emit")]),t._v(" 父子组件通信")]),t._v(" "),a("p",[t._v("父->子"),a("code",[t._v("props")]),t._v("，子->父 "),a("code",[t._v("$on、$emit")]),t._v(" 获取父子组件实例 "),a("code",[t._v("parent、children")]),t._v(" "),a("code",[t._v("Ref")]),t._v("获取实例的方式调用组件的属性或者方法 父->子孙 "),a("code",[t._v("Provide、inject")]),t._v(" 官方不推荐使用，但是写组件库时很常用")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("$emit")]),t._v("/"),a("code",[t._v("$on")]),t._v(" 自定义事件 兄弟组件通信")]),t._v(" "),a("p",[a("code",[t._v("Event Bus")]),t._v(" 实现跨组件通信 "),a("code",[t._v("Vue.prototype.$bus = new Vue()")]),t._v(" 自定义事件")])]),t._v(" "),a("li",[a("p",[t._v("vuex 跨级组件通信")]),t._v(" "),a("p",[t._v("Vuex、"),a("code",[t._v("$attrs、$listeners")]),t._v(" "),a("code",[t._v("Provide、inject")])])])]),t._v(" "),a("h2",{attrs:{id:"nexttick的实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nexttick的实现"}},[t._v("#")]),t._v(" nextTick的实现")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("nextTick")]),t._v("是"),a("code",[t._v("Vue")]),t._v("提供的一个全局"),a("code",[t._v("API")]),t._v(",是在下次"),a("code",[t._v("DOM")]),t._v("更新循环结束之后执行延迟回调，在修改数据之后使用"),a("code",[t._v("$nextTick")]),t._v("，则可以在回调中获取更新后的"),a("code",[t._v("DOM")]),t._v("；")]),t._v(" "),a("li",[t._v("Vue在更新DOM时是异步执行的。只要侦听到数据变化，"),a("code",[t._v("Vue")]),t._v("将开启1个队列，并缓冲在同一事件循环中发生的所有数据变更。如果同一个"),a("code",[t._v("watcher")]),t._v("被多次触发，只会被推入到队列中-次。这种在缓冲时去除重复数据对于避免不必要的计算和"),a("code",[t._v("DOM")]),t._v("操作是非常重要的。"),a("code",[t._v("nextTick")]),t._v("方法会在队列中加入一个回调函数，确保该函数在前面的dom操作完成后才调用；")]),t._v(" "),a("li",[t._v("比如，我在干什么的时候就会使用nextTick，传一个回调函数进去，在里面执行dom操作即可；")]),t._v(" "),a("li",[t._v("我也有简单了解"),a("code",[t._v("nextTick")]),t._v("实现，它会在"),a("code",[t._v("callbacks")]),t._v("里面加入我们传入的函数，然后用"),a("code",[t._v("timerFunc")]),t._v("异步方式调用它们，首选的异步方式会是"),a("code",[t._v("Promise")]),t._v("。这让我明白了为什么可以在"),a("code",[t._v("nextTick")]),t._v("中看到"),a("code",[t._v("dom")]),t._v("操作结果。")])]),t._v(" "),a("h2",{attrs:{id:"nexttick的实现原理是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nexttick的实现原理是什么"}},[t._v("#")]),t._v(" nextTick的实现原理是什么？")]),t._v(" "),a("p",[t._v("在下次 DOM 更新循环结束之后执行延迟回调，在修改数据之后立即使用 nextTick 来获取更新后的 DOM。 nextTick主要使用了宏任务和微任务。 根据执行环境分别尝试采用Promise、MutationObserver、setImmediate，如果以上都不行则采用setTimeout定义了一个异步方法，多次调用nextTick会将方法存入队列中，通过这个异步方法清空当前队列。")]),t._v(" "),a("h2",{attrs:{id:"插槽"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#插槽"}},[t._v("#")]),t._v(" 插槽")]),t._v(" "),a("p",[t._v("具名插槽、匿名插槽、作用域插槽")]),t._v(" "),a("p",[t._v("vue中的插槽是一个非常好用的东西slot说白了就是一个占位的 在vue当中插槽包含三种一种是默认插槽（匿名）一种是具名插槽还有一种就是作用域插槽 匿名插槽就是没有名字的只要默认的都填到这里具名插槽指的是具有名字的")]),t._v(" "),a("h2",{attrs:{id:"keep-alive的实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#keep-alive的实现"}},[t._v("#")]),t._v(" keep-alive的实现")]),t._v(" "),a("p",[a("strong",[t._v("作用")]),t._v("：实现组件缓存，保持这些组件的状态，以避免反复渲染导致的性能问题。 需要缓存组件 频繁切换，不需要重复渲染")]),t._v(" "),a("p",[a("strong",[t._v("场景")]),t._v("：tabs标签页 后台导航，vue性能优化")]),t._v(" "),a("p",[a("strong",[t._v("原理")]),t._v("："),a("code",[t._v("Vue.js")]),t._v("内部将"),a("code",[t._v("DOM")]),t._v("节点抽象成了一个个的"),a("code",[t._v("VNode")]),t._v("节点，"),a("code",[t._v("keep-alive")]),t._v("组件的缓存也是基于"),a("code",[t._v("VNode")]),t._v("节点的而不是直接存储"),a("code",[t._v("DOM")]),t._v("结构。它将满足条件"),a("code",[t._v("（pruneCache与pruneCache）")]),t._v("的组件在"),a("code",[t._v("cache")]),t._v("对象中缓存起来，在需要重新渲染的时候再将"),a("code",[t._v("vnode")]),t._v("节点从"),a("code",[t._v("cache")]),t._v("对象中取出并渲染。")]),t._v(" "),a("h2",{attrs:{id:"mixin"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mixin"}},[t._v("#")]),t._v(" mixin")]),t._v(" "),a("p",[t._v("mixin 项目变得复杂的时候，多个组件间有重复的逻辑就会用到mixin 多个组件有相同的逻辑，抽离出来 mixin并不是完美的解决方案，会有一些问题 vue3提出的Composition API旨在解决这些问题【追求完美是要消耗一定的成本的，如开发成本】 场景：PC端新闻列表和详情页一样的右侧栏目，可以使用mixin进行混合 劣势：1.变量来源不明确，不利于阅读 2.多mixin可能会造成命名冲突 3.mixin和组件可能出现多对多的关系，使得项目复杂度变高")]),t._v(" "),a("h2",{attrs:{id:"vuex的理解及使用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vuex的理解及使用场景"}},[t._v("#")]),t._v(" Vuex的理解及使用场景")]),t._v(" "),a("p",[t._v("Vuex 是一个专为 Vue 应用程序开发的状态管理模式。每一个 Vuex 应用的核心就是 store（仓库）。")]),t._v(" "),a("ol",[a("li",[t._v("Vuex 的状态存储是响应式的；当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新")]),t._v(" "),a("li",[t._v("改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation， 这样使得我们可以方便地跟踪每一个状态的变化 Vuex主要包括以下几个核心模块：")])]),t._v(" "),a("ul",[a("li",[t._v("State：定义了应用的状态数据")]),t._v(" "),a("li",[t._v("Getter：在 store 中定义“getter”（可以认为是 store 的计算属性），就像计算属性一样，getter 的返回值会根据它的依赖被缓存起来， 且只有当它的依赖值发生了改变才会被重新计算")]),t._v(" "),a("li",[t._v("Mutation：是唯一更改 store 中状态的方法，且必须是同步函数")]),t._v(" "),a("li",[t._v("Action：用于提交 mutation，而不是直接变更状态，可以包含任意异步操作 5. Module：允许将单一的 Store 拆分为多个 store 且同时保存在单一的状态树中")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a7249773a1634f779c48f3f0ffabf968~tplv-k3u1fbpfcp-watermark.awebp",alt:"img"}})]),t._v(" "),a("h2",{attrs:{id:"项目优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#项目优化"}},[t._v("#")]),t._v(" 项目优化")]),t._v(" "),a("p",[a("code",[t._v("移除生产环境的控制台打印")]),t._v("。方案很多，esling+pre-commit、使用插件自动去除，插件包括babel-plugin-transform-remove-console、uglifyjs-webpack-plugin、terser-webpack-plugin。最后选择了terser-webpack-plugin，脚手架vue-cli用这个插件来开启缓存和多线程打包，无需安装额外的插件，仅需在configureWebpack中设置terser插件的drop_console为true即可。最好还是养成良好的代码习惯，在开发基本完成后去掉无用的console，vscode中的turbo console就蛮好的。")]),t._v(" "),a("p",[a("code",[t._v("第三方库的按需加载")]),t._v("。echarts，官方文档里是使用配置文件指定使用的模块，另一种使用babel-plugin-equire实现按需加载。element-ui使用babel-plugin-component实现按需引入。")]),t._v(" "),a("p",[t._v("公有样式，比如对element-ui部分组件（如弹框、表格、下拉选框等）"),a("code",[t._v("样式的统一调整")]),t._v("。公共组件，比如date-picker、upload-file等在element-ui提供的组件基本上做进一步的封装。自定义组件包括preview-file、搜索框等。")]),t._v(" "),a("p",[t._v("前后端数据交换方面，推动项目组使用蓝湖、接口文档，与后端同学协商，规范后台数据返回。")]),t._v(" "),a("p",[t._v("雅虎军规提到的，"),a("code",[t._v("避免css表达式、滤镜，较少DOM操作，优化图片、精灵图，避免图片空链接等")]),t._v("。")]),t._v(" "),a("p",[a("code",[t._v("性能问题：页面加载性能、动画性能、操作性能")]),t._v("。Performance API，记录性能数据。")]),t._v(" "),a("p",[t._v("winter重学前端 优化技术方案：")]),t._v(" "),a("p",[t._v("缓存："),a("code",[t._v("客户端控制的强缓存策略")]),t._v("。")]),t._v(" "),a("p",[a("code",[t._v("降低请求成本")]),t._v("：DNS 由客户端控制，隔一段时间主动请求获取域名IP，不走系统DNS（完全看不懂）。TCP/TLS连接复用，服务器升级到HTTP2，尽量合并域名。")]),t._v(" "),a("p",[a("code",[t._v("减少请求数")]),t._v("：JS、CSS打包到HTML。JS控制图片异步加载、懒加载。小型图片使用data-uri。")]),t._v(" "),a("p",[a("code",[t._v("较少传输体积")]),t._v("：尽量使用SVG\\gradient代替图片。根据机型和网络状况控制图片清晰度。对低清晰度图片使用锐化来提升体验。设计上避免大型背景图。")]),t._v(" "),a("p",[a("code",[t._v("使用CDN加速")]),t._v("，内容分发网络，是建立再承载网基础上的虚拟分布式网络，能够将源站内容缓存到全国或全球的节点服务器上。用户就近获取内容，提高了资源的访问速度，分担源站压力。")])])}),[],!1,null,null,null);s.default=e.exports}}]);