(window.webpackJsonp=window.webpackJsonp||[]).push([[267],{672:function(t,s,a){"use strict";a.r(s);var n=a(28),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"八股文-002"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#八股文-002"}},[t._v("#")]),t._v(" 八股文-002")]),t._v(" "),a("p",[t._v("2021中高级前端面试题总结")]),t._v(" "),a("h2",{attrs:{id:"_1-html中居中的方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-html中居中的方式"}},[t._v("#")]),t._v(" "),a("strong",[t._v("1.HTML中居中的方式")])]),t._v(" "),a("ul",[a("li",[t._v("text-align:center方式，水平居中块级元素中的行内元素，如inline，inline-block")]),t._v(" "),a("li",[t._v("margin:0 auto方式，这种对齐方式要求内部元素是块级元素，并且不能脱离文档流（如设置position:absolute）,否则无效。")]),t._v(" "),a("li",[t._v("display:table-cell，配合width，text-align:center,vertical-align:middle让大小不固定元素垂直居中,这个方式将要对其的元素设置成为一个td，float、absolute等属性都会影响它的实现，不响应margin属性;")]),t._v(" "),a("li",[t._v("垂直居中，行内元素的垂直居中把height和line-height的值设置成一样的即可。")]),t._v(" "),a("li",[t._v("使用css3的translate水平垂直居中元素 ，设置top：50%，left：50%，然后使用transform来向左向上偏移半个内元素的宽和高。")]),t._v(" "),a("li",[t._v("使用css3计算的方式居中元素calc，例如：left: calc(50% - 元素固定宽度);")]),t._v(" "),a("li",[t._v("使用弹性盒(display：flex)，display:flex;justify-content:center;align-items:center;")])]),t._v(" "),a("h2",{attrs:{id:"_2-如何把行内元素转成块级元素-有多少种方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-如何把行内元素转成块级元素-有多少种方式"}},[t._v("#")]),t._v(" "),a("strong",[t._v("2.如何把行内元素转成块级元素， 有多少种方式？")])]),t._v(" "),a("ul",[a("li",[t._v("使用display:block")]),t._v(" "),a("li",[t._v("使用float")]),t._v(" "),a("li",[t._v("使用position（absolute和fixed）")])]),t._v(" "),a("h2",{attrs:{id:"_3-display-none-与-visibility-hidden-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-display-none-与-visibility-hidden-的区别"}},[t._v("#")]),t._v(" "),a("strong",[t._v("3.display:none 与 visibility：hidden 的区别")])]),t._v(" "),a("ul",[a("li",[t._v("如果给一个元素设置了display: none，那么该元素以及它的所有后代元素都会隐藏，它是前端开发人员使用频率最高的一种隐藏方式。隐藏后的元素无法点击，无法使用屏幕阅读器等辅助设备访问，占据的空间消失。")]),t._v(" "),a("li",[t._v("给元素设置visibility: hidden也可以隐藏这个元素，但是隐藏元素仍需占用与未隐藏时一样的空间，也就是说虽然元素不可见了，但是仍然会影响页面布局。")]),t._v(" "),a("li",[t._v("visibility具有继承性，给父元素设置visibility:hidden;子元素也会继承这个属性。但是如果重新给子元素设置visibility: visible,则子元素又会显示出来。这个和display: none有着质的区别。")]),t._v(" "),a("li",[t._v("visibility: hidden不会影响计数器的计数，如图所示，visibility: hidden虽然让一个元素不见了，但是其计数器仍在运行。这和display: none完全不一样。")])]),t._v(" "),a("h2",{attrs:{id:"_4-什么是伪类-和-伪元素-有哪些-区别是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-什么是伪类-和-伪元素-有哪些-区别是什么"}},[t._v("#")]),t._v(" "),a("strong",[t._v("4.什么是伪类 和 伪元素，有哪些，区别是什么？")])]),t._v(" "),a("p",[t._v("伪类用于定义元素的特殊状态。例如，它可以用于：")]),t._v(" "),a("ul",[a("li",[t._v("设置鼠标悬停在元素上时的样式")]),t._v(" "),a("li",[t._v("为已访问和未访问链接设置不同的样式")]),t._v(" "),a("li",[t._v("设置元素获得焦点时的样式")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("选择器")]),t._v(" "),a("th",[t._v("例子")]),t._v(" "),a("th",[t._v("例子描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v(":active")]),t._v(" "),a("td",[t._v("a:active")]),t._v(" "),a("td",[t._v("选择活动的链接。")])]),t._v(" "),a("tr",[a("td",[t._v(":checked")]),t._v(" "),a("td",[t._v("input:checked")]),t._v(" "),a("td",[t._v("选择每个被选中的 "),a("code",[t._v("<input>")]),t._v(" 元素。")])]),t._v(" "),a("tr",[a("td",[t._v(":disabled")]),t._v(" "),a("td",[t._v("input:disabled")]),t._v(" "),a("td",[t._v("选择每个被禁用的 "),a("code",[t._v("<input>")]),t._v(" 元素。")])]),t._v(" "),a("tr",[a("td",[t._v(":empty")]),t._v(" "),a("td",[t._v("p:empty")]),t._v(" "),a("td",[t._v("选择没有子元素的每个 "),a("code",[t._v("<p>")]),t._v(" 元素。")])]),t._v(" "),a("tr",[a("td",[t._v(":enabled")]),t._v(" "),a("td",[t._v("input:enabled")]),t._v(" "),a("td",[t._v("选择每个已启用的 "),a("code",[t._v("<input>")]),t._v(" 元素。")])]),t._v(" "),a("tr",[a("td",[t._v(":first-child")]),t._v(" "),a("td",[t._v("p:first-child")]),t._v(" "),a("td",[t._v("选择作为其父的首个子元素的每个 "),a("code",[t._v("<p>")]),t._v(" 元素。")])]),t._v(" "),a("tr",[a("td",[t._v(":first-of-type")]),t._v(" "),a("td",[t._v("p:first-of-type")]),t._v(" "),a("td",[t._v("选择作为其父的首个 "),a("code",[t._v("<p>")]),t._v(" 元素的每个 "),a("code",[t._v("<p>")]),t._v(" 元素。")])]),t._v(" "),a("tr",[a("td",[t._v(":focus")]),t._v(" "),a("td",[t._v("input:focus")]),t._v(" "),a("td",[t._v("选择获得焦点的 "),a("code",[t._v("<input>")]),t._v(" 元素。")])]),t._v(" "),a("tr",[a("td",[t._v(":hover")]),t._v(" "),a("td",[t._v("a:hover")]),t._v(" "),a("td",[t._v("选择鼠标悬停其上的链接。")])]),t._v(" "),a("tr",[a("td",[t._v(":in-range")]),t._v(" "),a("td",[t._v("input:in-range")]),t._v(" "),a("td",[t._v("选择具有指定范围内的值的 "),a("code",[t._v("<input>")]),t._v(" 元素。")])]),t._v(" "),a("tr",[a("td",[t._v(":invalid")]),t._v(" "),a("td",[t._v("input:invalid")]),t._v(" "),a("td",[t._v("选择所有具有无效值的 "),a("code",[t._v("<input>")]),t._v(" 元素。")])]),t._v(" "),a("tr",[a("td",[t._v(":lang(language)")]),t._v(" "),a("td",[t._v("p:lang(it)")]),t._v(" "),a("td",[t._v('选择每个 lang 属性值以 "it" 开头的 '),a("code",[t._v("<p>")]),t._v(" 元素。")])]),t._v(" "),a("tr",[a("td",[t._v(":last-child")]),t._v(" "),a("td",[t._v("p:last-child")]),t._v(" "),a("td",[t._v("选择作为其父的最后一个子元素的每个 "),a("code",[t._v("<p>")]),t._v(" 元素。")])]),t._v(" "),a("tr",[a("td",[t._v(":last-of-type")]),t._v(" "),a("td",[t._v("p:last-of-type")]),t._v(" "),a("td",[t._v("选择作为其父的最后一个 "),a("code",[t._v("<p>")]),t._v(" 元素的每个 "),a("code",[t._v("<p>")]),t._v(" 元素。")])]),t._v(" "),a("tr",[a("td",[t._v(":link")]),t._v(" "),a("td",[t._v("a:link")]),t._v(" "),a("td",[t._v("选择所有未被访问的链接。")])]),t._v(" "),a("tr",[a("td",[t._v(":not(selector)")]),t._v(" "),a("td",[t._v(":not(p)")]),t._v(" "),a("td",[t._v("选择每个非 "),a("code",[t._v("<p>")]),t._v(" 元素的元素。")])]),t._v(" "),a("tr",[a("td",[t._v(":nth-child(n)")]),t._v(" "),a("td",[t._v("p:nth-child(2)")]),t._v(" "),a("td",[t._v("选择作为其父的第二个子元素的每个 "),a("code",[t._v("<p>")]),t._v(" 元素。")])]),t._v(" "),a("tr",[a("td",[t._v(":nth-last-child(n)")]),t._v(" "),a("td",[t._v("p:nth-last-child(2)")]),t._v(" "),a("td",[t._v("选择作为父的第二个子元素的每个"),a("code",[t._v("<p>")]),t._v("元素，从最后一个子元素计数。")])]),t._v(" "),a("tr",[a("td",[t._v(":nth-last-of-type(n)")]),t._v(" "),a("td",[t._v("p:nth-last-of-type(2)")]),t._v(" "),a("td",[t._v("选择作为父的第二个"),a("code",[t._v("<p>")]),t._v("元素的每个"),a("code",[t._v("<p>")]),t._v("元素，从最后一个子元素计数")])]),t._v(" "),a("tr",[a("td",[t._v(":nth-of-type(n)")]),t._v(" "),a("td",[t._v("p:nth-of-type(2)")]),t._v(" "),a("td",[t._v("选择作为其父的第二个 "),a("code",[t._v("<p>")]),t._v(" 元素的每个 "),a("code",[t._v("<p>")]),t._v(" 元素。")])]),t._v(" "),a("tr",[a("td",[t._v(":only-of-type")]),t._v(" "),a("td",[t._v("p:only-of-type")]),t._v(" "),a("td",[t._v("选择作为其父的唯一 "),a("code",[t._v("<p>")]),t._v(" 元素的每个 "),a("code",[t._v("<p>")]),t._v(" 元素。")])]),t._v(" "),a("tr",[a("td",[t._v(":only-child")]),t._v(" "),a("td",[t._v("p:only-child")]),t._v(" "),a("td",[t._v("选择作为其父的唯一子元素的 "),a("code",[t._v("<p>")]),t._v(" 元素。")])]),t._v(" "),a("tr",[a("td",[t._v(":optional")]),t._v(" "),a("td",[t._v("input:optional")]),t._v(" "),a("td",[t._v('选择不带 "required" 属性的 '),a("code",[t._v("<input>")]),t._v(" 元素。")])]),t._v(" "),a("tr",[a("td",[t._v(":out-of-range")]),t._v(" "),a("td",[t._v("input:out-of-range")]),t._v(" "),a("td",[t._v("选择值在指定范围之外的 "),a("code",[t._v("<input>")]),t._v(" 元素。")])]),t._v(" "),a("tr",[a("td",[t._v(":read-only")]),t._v(" "),a("td",[t._v("input:read-only")]),t._v(" "),a("td",[t._v('选择指定了 "readonly" 属性的 '),a("code",[t._v("<input>")]),t._v(" 元素。")])]),t._v(" "),a("tr",[a("td",[t._v(":read-write")]),t._v(" "),a("td",[t._v("input:read-write")]),t._v(" "),a("td",[t._v('选择不带 "readonly" 属性的 '),a("code",[t._v("<input>")]),t._v(" 元素。")])]),t._v(" "),a("tr",[a("td",[t._v(":required")]),t._v(" "),a("td",[t._v("input:required")]),t._v(" "),a("td",[t._v('选择指定了 "required" 属性的 '),a("code",[t._v("<input>")]),t._v(" 元素。")])]),t._v(" "),a("tr",[a("td",[t._v(":root")]),t._v(" "),a("td",[t._v("root")]),t._v(" "),a("td",[t._v("选择元素的根元素。")])]),t._v(" "),a("tr",[a("td",[t._v(":target")]),t._v(" "),a("td",[t._v("#news:target")]),t._v(" "),a("td",[t._v("选择当前活动的 #news 元素（单击包含该锚名称的 URL）。")])]),t._v(" "),a("tr",[a("td",[t._v(":valid")]),t._v(" "),a("td",[t._v("input:valid")]),t._v(" "),a("td",[t._v("选择所有具有有效值的 "),a("code",[t._v("<input>")]),t._v(" 元素。")])]),t._v(" "),a("tr",[a("td",[t._v(":visited")]),t._v(" "),a("td",[t._v("a:visited")]),t._v(" "),a("td",[t._v("选择所有已访问的链接。")])])])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("选择器")]),t._v(" "),a("th",[t._v("例子")]),t._v(" "),a("th",[t._v("例子描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("::after")]),t._v(" "),a("td",[t._v("p::after")]),t._v(" "),a("td",[t._v("在每个 "),a("code",[t._v("<p>")]),t._v(" 元素之后插入内容。")])]),t._v(" "),a("tr",[a("td",[t._v("::before")]),t._v(" "),a("td",[t._v("p::before")]),t._v(" "),a("td",[t._v("在每个 "),a("code",[t._v("<p>")]),t._v(" 元素之前插入内容。")])]),t._v(" "),a("tr",[a("td",[t._v("::first-letter")]),t._v(" "),a("td",[t._v("p::first-letter")]),t._v(" "),a("td",[t._v("选择每个 "),a("code",[t._v("<p>")]),t._v(" 元素的首字母。")])]),t._v(" "),a("tr",[a("td",[t._v("::first-line")]),t._v(" "),a("td",[t._v("p::first-line")]),t._v(" "),a("td",[t._v("选择每个 "),a("code",[t._v("<p>")]),t._v(" 元素的首行。")])]),t._v(" "),a("tr",[a("td",[t._v("::selection")]),t._v(" "),a("td",[t._v("p::selection")]),t._v(" "),a("td",[t._v("选择用户选择的元素部分。")])])])]),t._v(" "),a("p",[t._v("CSS 伪元素用于设置元素指定部分的样式。例如，它可用于：")]),t._v(" "),a("ul",[a("li",[t._v("设置元素的首字母、首行的样式")]),t._v(" "),a("li",[t._v("在元素的内容之前或之后插入内容")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("选择器")]),t._v(" "),a("th",[t._v("例子")]),t._v(" "),a("th",[t._v("例子描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v(":active")]),t._v(" "),a("td",[t._v("a:active")]),t._v(" "),a("td",[t._v("选择活动的链接。")])]),t._v(" "),a("tr",[a("td",[t._v(":checked")]),t._v(" "),a("td",[t._v("input:checked")]),t._v(" "),a("td",[t._v("选择每个被选中的 "),a("code",[t._v("<input>")]),t._v(" 元素。")])]),t._v(" "),a("tr",[a("td",[t._v(":disabled")]),t._v(" "),a("td",[t._v("input:disabled")]),t._v(" "),a("td",[t._v("选择每个被禁用的 "),a("code",[t._v("<input>")]),t._v(" 元素。")])]),t._v(" "),a("tr",[a("td",[t._v(":empty")]),t._v(" "),a("td",[t._v("p:empty")]),t._v(" "),a("td",[t._v("选择没有子元素的每个 "),a("code",[t._v("<p>")]),t._v(" 元素。")])]),t._v(" "),a("tr",[a("td",[t._v(":enabled")]),t._v(" "),a("td",[t._v("input:enabled")]),t._v(" "),a("td",[t._v("选择每个已启用的 "),a("code",[t._v("<input>")]),t._v(" 元素。")])]),t._v(" "),a("tr",[a("td",[t._v(":first-child")]),t._v(" "),a("td",[t._v("p:first-child")]),t._v(" "),a("td",[t._v("选择作为其父的首个子元素的每个 "),a("code",[t._v("<p>")]),t._v(" 元素。")])]),t._v(" "),a("tr",[a("td",[t._v(":first-of-type")]),t._v(" "),a("td",[t._v("p:first-of-type")]),t._v(" "),a("td",[t._v("选择作为其父的首个 "),a("code",[t._v("<p>")]),t._v(" 元素的每个 "),a("code",[t._v("<p>")]),t._v(" 元素。")])]),t._v(" "),a("tr",[a("td",[t._v(":focus")]),t._v(" "),a("td",[t._v("input:focus")]),t._v(" "),a("td",[t._v("选择获得焦点的 "),a("code",[t._v("<input>")]),t._v(" 元素。")])]),t._v(" "),a("tr",[a("td",[t._v(":hover")]),t._v(" "),a("td",[t._v("a:hover")]),t._v(" "),a("td",[t._v("选择鼠标悬停其上的链接。")])]),t._v(" "),a("tr",[a("td",[t._v(":in-range")]),t._v(" "),a("td",[t._v("input:in-range")]),t._v(" "),a("td",[t._v("选择具有指定范围内的值的 "),a("code",[t._v("<input>")]),t._v(" 元素。")])]),t._v(" "),a("tr",[a("td",[t._v(":invalid")]),t._v(" "),a("td",[t._v("input:invalid")]),t._v(" "),a("td",[t._v("选择所有具有无效值的 "),a("code",[t._v("<inuput>")]),t._v(" 元素。")])]),t._v(" "),a("tr",[a("td",[t._v(":lang(language)")]),t._v(" "),a("td",[t._v("p:lang(it)")]),t._v(" "),a("td",[t._v('选择每个 lang 属性值以 "it" 开头的 '),a("code",[t._v("<p>")]),t._v(" 元素。")])]),t._v(" "),a("tr",[a("td",[t._v(":last-child")]),t._v(" "),a("td",[t._v("p:last-child")]),t._v(" "),a("td",[t._v("选择作为其父的最后一个子元素的每个 "),a("code",[t._v("<p>")]),t._v(" 元素。")])]),t._v(" "),a("tr",[a("td",[t._v(":last-of-type")]),t._v(" "),a("td",[t._v("p:last-of-type")]),t._v(" "),a("td",[t._v("选择作为其父的最后一个 "),a("code",[t._v("<p>")]),t._v(" 元素的每个 "),a("code",[t._v("<p>")]),t._v(" 元素。")])]),t._v(" "),a("tr",[a("td",[t._v(":link")]),t._v(" "),a("td",[t._v("a:link")]),t._v(" "),a("td",[t._v("选择所有未被访问的链接。")])]),t._v(" "),a("tr",[a("td",[t._v(":not(selector)")]),t._v(" "),a("td",[t._v(":not(p)")]),t._v(" "),a("td",[t._v("选择每个非 "),a("code",[t._v("<p>")]),t._v(" 元素的元素。")])]),t._v(" "),a("tr",[a("td",[t._v(":nth-child(n)")]),t._v(" "),a("td",[t._v("p:nth-child(2)")]),t._v(" "),a("td",[t._v("选择作为其父的第二个子元素的每个 "),a("code",[t._v("<p>")]),t._v(" 元素。")])]),t._v(" "),a("tr",[a("td",[t._v(":nth-last-child(n)")]),t._v(" "),a("td",[t._v("p:nth-last-child(2)")]),t._v(" "),a("td",[t._v("选择作为父的第二个子元素的每个"),a("code",[t._v("<p>")]),t._v("元素，从最后一个子元素计数。")])]),t._v(" "),a("tr",[a("td",[t._v(":nth-last-of-type(n)")]),t._v(" "),a("td",[t._v("p:nth-last-of-type(2e'f)")]),t._v(" "),a("td",[t._v("选择作为父的第二个"),a("code",[t._v("<p>")]),t._v("元素的每个"),a("code",[t._v("<p>")]),t._v("元素，从最后一个子元素计数")])]),t._v(" "),a("tr",[a("td",[t._v(":nth-of-type(n)")]),t._v(" "),a("td",[t._v("p:nth-of-type(2)")]),t._v(" "),a("td",[t._v("选择作为其父的第二个 "),a("code",[t._v("<p>")]),t._v(" 元素的每个 "),a("code",[t._v("<p>")]),t._v(" 元素。")])]),t._v(" "),a("tr",[a("td",[t._v(":only-of-type")]),t._v(" "),a("td",[t._v("p:only-of-type")]),t._v(" "),a("td",[t._v("选择作为其父的唯一 "),a("code",[t._v("<p>")]),t._v(" 元素的每个 "),a("code",[t._v("<p>")]),t._v(" 元素。")])]),t._v(" "),a("tr",[a("td",[t._v(":only-child")]),t._v(" "),a("td",[t._v("p:only-child")]),t._v(" "),a("td",[t._v("选择作为其父的唯一子元素的 "),a("code",[t._v("<p>")]),t._v(" 元素。")])]),t._v(" "),a("tr",[a("td",[t._v(":optional")]),t._v(" "),a("td",[t._v("input:optional")]),t._v(" "),a("td",[t._v('选择不带 "required" 属性的 '),a("code",[t._v("<input>")]),t._v(" 元素。")])]),t._v(" "),a("tr",[a("td",[t._v(":out-of-range")]),t._v(" "),a("td",[t._v("input:out-of-range")]),t._v(" "),a("td",[t._v("选择值在指定范围之外的 "),a("code",[t._v("<input>")]),t._v(" 元素。")])]),t._v(" "),a("tr",[a("td",[t._v(":read-only")]),t._v(" "),a("td",[t._v("input:read-only")]),t._v(" "),a("td",[t._v('选择指定了 "readonly" 属性的 '),a("code",[t._v("<input>")]),t._v(" 元素。")])]),t._v(" "),a("tr",[a("td",[t._v(":read-write")]),t._v(" "),a("td",[t._v("input:read-write")]),t._v(" "),a("td",[t._v('选择不带 "readonly" 属性的 '),a("code",[t._v("<input>")]),t._v(" 元素。")])]),t._v(" "),a("tr",[a("td",[t._v(":required")]),t._v(" "),a("td",[t._v("input:required")]),t._v(" "),a("td",[t._v('选择指定了 "required" 属性的 '),a("code",[t._v("<input>")]),t._v(" 元素。")])]),t._v(" "),a("tr",[a("td",[t._v(":root")]),t._v(" "),a("td",[t._v("root")]),t._v(" "),a("td",[t._v("选择元素的根元素。")])]),t._v(" "),a("tr",[a("td",[t._v(":target")]),t._v(" "),a("td",[t._v("#news:target")]),t._v(" "),a("td",[t._v("选择当前活动的 #news 元素（单击包含该锚名称的 URL）。")])]),t._v(" "),a("tr",[a("td",[t._v(":valid")]),t._v(" "),a("td",[t._v("input:valid")]),t._v(" "),a("td",[t._v("选择所有具有有效值的 "),a("code",[t._v("<input>")]),t._v(" 元素。")])]),t._v(" "),a("tr",[a("td",[t._v(":visited")]),t._v(" "),a("td",[t._v("a:visited")]),t._v(" "),a("td",[t._v("选择所有已访问的链接。")])])])]),t._v(" "),a("blockquote",[a("p",[t._v("伪类和伪元素的根本区别在于："),a("strong",[t._v("它们是否创造了新的元素。")])])]),t._v(" "),a("p",[a("strong",[t._v("伪类：")])]),t._v(" "),a("blockquote",[a("p",[t._v("伪类存在的意义是为了通过选择器找到那些不存在与DOM树中的信息以及不能被常规CSS选择器获取到的信息。伪类由"),a("strong",[t._v("一个")]),t._v("冒号"),a("code",[t._v(":")]),t._v("开头，冒号后面是伪类的名称和包含在圆括号中的可选参数。任何常规选择器可以再任何位置使用伪类。伪类语法不区别大小写。一些伪类的作用会互斥，另外一些伪类可以同时被同一个元素使用。并且，为了满足用户在操作DOM时产生的DOM结构改变，伪类也可以是动态的。\n获取不存在与DOM树中的信息。比如"),a("code",[t._v("<a>")]),t._v("标签的"),a("code",[t._v(":link")]),t._v("、"),a("code",[t._v("visited")]),t._v("等，这些信息不存在与DOM树结构中，只能通过CSS选择器来获取；\n获取不能被常规CSS选择器获取的信息。比如伪类"),a("code",[t._v(":target")]),t._v("，它的作用是匹配文档(页面)的URI中某个标志符的目标元素。")])]),t._v(" "),a("p",[a("strong",[t._v("伪元素：")])]),t._v(" "),a("blockquote",[a("p",[t._v("伪元素在DOM树中创建了一些抽象元素，这些抽象元素是不存在于文档语言里的（可以理解为html源码）。比如：documen接口不提供访问元素内容的第一个字或者第一行的机制，而伪元素可以使开发者可以提取到这些信息。并且，一些伪元素可以使开发者获取到不存在于源文档中的内容（比如常见的"),a("code",[t._v("::before")]),t._v(","),a("code",[t._v("::after")]),t._v("）。\n伪元素的由"),a("strong",[t._v("两个冒号")]),a("code",[t._v("::")]),t._v("开头，然后是伪元素的名称。\n使用两个冒号"),a("code",[t._v("::")]),t._v("是为了区别伪类和伪元素（CSS2中并没有区别）。当然，考虑到兼容性，CSS2中已存的伪元素仍然可以使用一个冒号"),a("code",[t._v(":")]),t._v("的语法，但是CSS3中新增的伪元素必须使用两个冒号"),a("code",[t._v("::")]),t._v("。\n一个选择器只能使用一个伪元素，并且伪元素必须处于选择器语句的最后。\n注：不排除未来会加入同时使用多个伪元素的机制。")])]),t._v(" "),a("p",[t._v("第一段话是伪元素的清晰定义，也是伪元素与伪类最大的区别。简单来说，伪元素创建了一个虚拟容器，这个容器不包含任何DOM元素，但是可以包含内容。另外，开发者还可以为伪元素定制样式。")]),t._v(" "),a("p",[t._v("最后，总结一下伪类与伪元素的特性及其区别：")]),t._v(" "),a("ol",[a("li",[t._v("伪类本质上是为了弥补常规CSS选择器的不足，以便获取到更多信息；")]),t._v(" "),a("li",[t._v("伪元素本质上是创建了一个有内容的虚拟容器；")]),t._v(" "),a("li",[t._v("CSS3中伪类和伪元素的语法不同；")]),t._v(" "),a("li",[t._v("可以同时使用多个伪类，而只能同时使用一个伪元素；")])]),t._v(" "),a("h2",{attrs:{id:"_5-box-sizing是什么-各个参数含义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-box-sizing是什么-各个参数含义"}},[t._v("#")]),t._v(" "),a("strong",[t._v("5.box-sizing是什么，各个参数含义")])]),t._v(" "),a("p",[a("code",[t._v("box-sizing")]),t._v("属性定义了 "),a("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Glossary/User_agent",target:"_blank",rel:"noopener noreferrer"}},[t._v("user agent"),a("OutboundLink")],1),t._v("应该如何计算一个元素的总宽度和总高度。")]),t._v(" "),a("p",[t._v("在 "),a("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/en-US/docs/Web/CSS/CSS_Box_Model/Introduction_to_the_CSS_box_model",target:"_blank",rel:"noopener noreferrer"}},[t._v("CSS 盒子模型"),a("OutboundLink")],1),t._v("的默认定义里，你对一个元素所设置的 "),a("code",[t._v("width")]),t._v(" 与 "),a("code",[t._v("height")]),t._v(" 只会应用到这个元素的内容区。如果这个元素有任何的 "),a("code",[t._v("border")]),t._v(" 或 "),a("code",[t._v("padding")]),t._v(" ，绘制到屏幕上时的盒子宽度和高度会加上设置的边框和内边距值。这意味着当你调整一个元素的宽度和高度时需要时刻注意到这个元素的边框和内边距。当我们实现响应式布局时，这个特点尤其烦人。")]),t._v(" "),a("h3",{attrs:{id:"属性值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性值"}},[t._v("#")]),t._v(" 属性值")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("content-box\n")])])]),a("p",[t._v("默认值，标准盒子模型。 "),a("code",[t._v("width")]),t._v(" 与 "),a("code",[t._v("height")]),t._v(" 只包括内容的宽和高， 不包括边框（border），内边距（padding），外边距（margin）。注意: 内边距、边框和外边距都在这个盒子的外部。 比如说，"),a("code",[t._v(".box {width: 350px; border: 10px solid black;}")]),t._v(" 在浏览器中的渲染的实际宽度将是 370px。")]),t._v(" "),a("p",[t._v("尺寸计算公式：")]),t._v(" "),a("p",[a("code",[t._v("width")]),t._v(" = 内容的宽度")]),t._v(" "),a("p",[a("code",[t._v("height")]),t._v(" = 内容的高度")]),t._v(" "),a("p",[t._v("宽度和高度的计算值都不包含内容的边框（border）和内边距（padding）。")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("border-box\n")])])]),a("p",[a("code",[t._v("width")]),t._v(" 和 "),a("code",[t._v("height")]),t._v(" 属性包括内容，内边距和边框，但不包括外边距。这是当文档处于 Quirks模式 时Internet Explorer使用的"),a("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/en-US/docs/Web/CSS/CSS_Box_Model/Introduction_to_the_CSS_box_model",target:"_blank",rel:"noopener noreferrer"}},[t._v("盒模型"),a("OutboundLink")],1),t._v("。注意，填充和边框将在盒子内 , 例如, "),a("code",[t._v(".box {width: 350px; border: 10px solid black;}")]),t._v(" 导致在浏览器中呈现的宽度为350px的盒子。内容框不能为负，并且被分配到0，使得不可能使用border-box使元素消失。")]),t._v(" "),a("p",[t._v("尺寸计算公式：")]),t._v(" "),a("p",[a("em",[a("code",[t._v("width")])]),t._v(" "),a("em",[t._v("= border + padding + 内容的宽度")])]),t._v(" "),a("p",[a("em",[a("code",[t._v("height")])]),t._v(" "),a("em",[t._v("= border + padding + 内容的高度")])]),t._v(" "),a("p",[t._v("**注1：**border-box不包含margin。")]),t._v(" "),a("p",[t._v("**注2：**对于新的web站点，你可能希望首先将box-sizing设置为border-box，如下所示： * { box-sizing: border-box; } 这使得处理元素大小的工作变得容易得多，并且通常消除了在布局内容时可能遇到的许多陷阱。然而，在某些情况下，你应谨慎使用这个属性。例如： 你正在编写一个将由其他人使用的共享组件库，如果他们网站的其余部分没有设置此值，他们可能会发现很难使用你的组件库。")]),t._v(" "),a("h2",{attrs:{id:"_6-js中map和filter区别-是否会改变原数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-js中map和filter区别-是否会改变原数组"}},[t._v("#")]),t._v(" "),a("strong",[t._v("6.JS中map和filter区别，是否会改变原数组？")])]),t._v(" "),a("p",[a("strong",[t._v("map()")]),t._v(" 会根据提供的函数对指定序列做映射。")]),t._v(" "),a("blockquote",[a("p",[t._v("第一个参数 function 以参数序列中的每一个元素调用 function 函数，返回包含每次 function 函数返回值的新列表。")])]),t._v(" "),a("p",[a("strong",[t._v("filter()")]),t._v(" 函数用于过滤序列，过滤掉不符合条件的元素，返回由符合条件元素组成的新列表。")]),t._v(" "),a("blockquote",[a("p",[t._v("该接收两个参数，第一个为函数，第二个为序列，序列的每个元素作为参数传递给函数进行判，然后返回 true 或 false，最后将返回 true 的元素放到新列表中。")])]),t._v(" "),a("p",[t._v("map和filter都不会改变原数组。")]),t._v(" "),a("h2",{attrs:{id:"_7-js中-不通过insetafter-的方式-如何在元素后插入一个新元素"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-js中-不通过insetafter-的方式-如何在元素后插入一个新元素"}},[t._v("#")]),t._v(" 7.JS中，不通过insetAfter()的方式，如何在元素后插入一个新元素？")]),t._v(" "),a("p",[t._v("检查目标元素是不是parent的最后一个子元素，即比较parent元素的lastChild属性值与目标元素是否存在“等于“关系：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parent"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastChild "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" targetElement"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("如果是，就用appendChild方法把新元素追加到parent元素上，这样新元素恰好被插入到目标元素之后：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("parent"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("appendChild")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newElement"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("如果不是， 就把新元素插入到目标元素和目标元素的下一个元素中间。目标元素下一个兄弟元素即目标元素的nextSibling属性。用insertBerfore方法把新元素插入到目标元素的下一个兄弟元素之间。")]),t._v(" "),a("h2",{attrs:{id:"_8-判断一个变量是数组有几种方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-判断一个变量是数组有几种方式"}},[t._v("#")]),t._v(" 8.判断一个变量是数组有几种方式？")]),t._v(" "),a("ol",[a("li",[t._v("instanceof ，原型判断，写法：变量 instanceof Array")]),t._v(" "),a("li",[a("strong",[t._v("proto")]),t._v("，原型判断，写法：变量."),a("strong",[t._v("proto")]),t._v(" === Array.prototype")]),t._v(" "),a("li",[t._v("constructor，原型判断，写法：变量.constructor === Array")]),t._v(" "),a("li",[t._v("Object.prototype.toString，通过object类型的副属性class去判断的其中函数的class是Function，结果是[object Function]， 普通的对象是Object，结果是[object Object]，写法：Object.prototype.toString.call(变量) === '[object Array]'")]),t._v(" "),a("li",[t._v("Array.isArray，es6新增的方法，写法：Array.isArray(变量)")])]),t._v(" "),a("h2",{attrs:{id:"_9-js中如何区别object-和-array"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-js中如何区别object-和-array"}},[t._v("#")]),t._v(" 9.JS中如何区别Object 和 Array？")]),t._v(" "),a("p",[t._v("typeof一般测试基本类型（Undefined、Null、Boolean、Number、String)，对引用类型（数组，对象，函数），数组和对象返回object，函数引用类型返回Function。typeof对于区分数组和对象是没有用的。")]),t._v(" "),a("p",[t._v("1.通过ES6中的Array.isArray来识别")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("Array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isArray")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true")]),t._v("\nArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isArray")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//false")]),t._v("\n")])])]),a("p",[t._v("2.通过instanceof来识别")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//false")]),t._v("\n")])])]),a("p",[t._v("3.通过调用constructor来识别")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回object")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回Array")]),t._v("\n")])])]),a("p",[t._v("4.通过Object.prototype.toString.call方法来识别")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//["object Array"]')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//["object Object"]')]),t._v("\n")])])]),a("p",[t._v("5.通过isPrototypeOf()函数来识别")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isPrototypeOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true表示是数组，false不是数组")]),t._v("\n")])])]),a("h2",{attrs:{id:"_10-事件代理、事件冒泡、事件捕获是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-事件代理、事件冒泡、事件捕获是什么"}},[t._v("#")]),t._v(" 10.事件代理、事件冒泡、事件捕获是什么？")]),t._v(" "),a("p",[t._v("**事件代理：**又称之为事件委托，是JavaScript中常用绑定事件的常用技巧。“事件代理”是把原本需要绑定在子元素的响应事件（click、keydown......）委托给父元素，让父元素担当事件监听的职务。事件代理的原理是DOM元素的事件冒泡。")]),t._v(" "),a("p",[a("strong",[t._v("事件代理优点：")])]),t._v(" "),a("ol",[a("li",[t._v("可以大量节省内存占用，减少事件注册；")]),t._v(" "),a("li",[t._v("可以实现当新增子对象时无需再次对其绑定（动态绑定事件）。")])]),t._v(" "),a("p",[t._v("一个事件触发后，会在子元素和父元素之间传播（propagation），这种传播分成三个阶段：")]),t._v(" "),a("ul",[a("li",[t._v("**捕获阶段：**从window对象传导到目标节点（上层传到底层）称为“捕获阶段”（capture phase），捕获阶段不会响应任何事件；")]),t._v(" "),a("li",[t._v("**目标阶段：**在目标节点上触发，称为“目标阶段”")]),t._v(" "),a("li",[t._v("**冒泡阶段：**从目标节点传导回window对象（从底层传回上层），称为“冒泡阶段”（bubbling phase）。事件代理即是利用事件冒泡的机制把里层所需要响应的事件绑定到外层。")])]),t._v(" "),a("h2",{attrs:{id:"_11-axios-原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-axios-原理"}},[t._v("#")]),t._v(" 11.axios 原理")]),t._v(" "),a("p",[t._v("axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。axios可以用在浏览器和 node.js 中是因为，它会自动判断当前环境是什么，如果是浏览器，就会基于XMLHttpRequests实现axios。如果是node.js环境，就会基于node内置核心模块http实现axios。")]),t._v(" "),a("ul",[a("li",[t._v("XMLHttpRequest 是浏览器内置的一个对象，它为客户端提供了在客户端和服务器之间传输数据的功能。")]),t._v(" "),a("li",[t._v("process 对象是node内置的一个全局变量，提供有关信息，控制当前 Node.js 进程。通过判断process是否存在，来判断是否是node环境。")])]),t._v(" "),a("p",[a("strong",[t._v("特征：")])]),t._v(" "),a("ol",[a("li",[t._v("Make XMLHttpRequests from the browser（从浏览器发起XMLHttpRequests请求）")]),t._v(" "),a("li",[t._v("Make http requests from node.js（从node.js发起http请求）")]),t._v(" "),a("li",[t._v("Supports the Promise API（支持PromiseAPI）")]),t._v(" "),a("li",[t._v("Intercept request and response（拦截请求和响应）")]),t._v(" "),a("li",[t._v("Transform request and response data（转换请求和响应数据）")]),t._v(" "),a("li",[t._v("Cancel requests（取消请求）")]),t._v(" "),a("li",[t._v("Automatic transforms for JSON data（自动转换json数据）")]),t._v(" "),a("li",[t._v("Client side support for protecting against XSRF（客户端支持自动防止XSRF）")])]),t._v(" "),a("h2",{attrs:{id:"_12-什么是跨域-如何处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_12-什么是跨域-如何处理"}},[t._v("#")]),t._v(" 12.什么是跨域？如何处理？")]),t._v(" "),a("p",[t._v("当一个请求url的"),a("strong",[t._v("协议、域名、端口")]),t._v("三者之间任意一个与当前页面url不同即为跨域。")]),t._v(" "),a("blockquote",[a("p",[t._v("出于浏览器的同源策略限制。同源策略（Sameoriginpolicy）是一种约定，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，则浏览器的正常功能可能都会受到影响。可以说Web是构建在同源策略基础之上的，浏览器只是针对同源策略的一种实现。同源策略会阻止一个域的javascript脚本和另外一个域的内容进行交互。所谓同源（即指在同一个域）就是两个页面具有相同的协议（protocol），主机（host）和端口号（port）。")])]),t._v(" "),a("p",[a("strong",[t._v("非同源限制：")])]),t._v(" "),a("ol",[a("li",[t._v("无法读取非同源网页的 Cookie、LocalStorage 和 IndexedDB")]),t._v(" "),a("li",[t._v("无法接触非同源网页的 DOM")]),t._v(" "),a("li",[t._v("无法向非同源地址发送 AJAX 请求")])]),t._v(" "),a("p",[a("strong",[t._v("解决方法：")])]),t._v(" "),a("p",[a("strong",[t._v("1. 设置document.domain解决无法读取非同源网页的 Cookie问题")])]),t._v(" "),a("blockquote",[a("p",[t._v("因为浏览器是通过document.domain属性来检查两个页面是否同源，因此只要通过设置相同的document.domain，两个页面就可以共享Cookie（此方案仅限主域相同，子域不同的跨域应用场景。）")])]),t._v(" "),a("p",[a("strong",[t._v("2. 跨文档通信 API：window.postMessage()")])]),t._v(" "),a("blockquote",[a("p",[t._v("调用postMessage方法实现父窗口"),a("a",{attrs:{href:"https://link.zhihu.com/?target=http%3A//test1.com",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://test1.com"),a("OutboundLink")],1),t._v("向子窗口"),a("a",{attrs:{href:"https://link.zhihu.com/?target=http%3A//test2.com",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://test2.com"),a("OutboundLink")],1),t._v("发消息（子窗口同样可以通过该方法发送消息给父窗口），它可用于解决以下方面的问题：\n1.页面和其打开的新窗口的数据传递\n2.多窗口之间消息传递\n3.页面与嵌套的iframe消息传递\n4.上面三个场景的跨域数据传递")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 父窗口打开一个子窗口")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" openWindow "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" window"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("open")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'http://test2.com'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'title'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 父窗口向子窗口发消息(第一个参数代表发送的内容，第二个参数代表接收消息窗口的url)")]),t._v("\nopenWindow"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("postMessage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Nice to meet you!'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'http://test2.com'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("调用message事件，监听对方发送的消息")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 监听 message 消息")]),t._v("\nwindow"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'message'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("e")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("source"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// e.source 发送消息的窗口")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("origin"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// e.origin 消息发向的网址")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// e.data   发送的消息")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[a("strong",[t._v("3. JSONP")])]),t._v(" "),a("blockquote",[a("p",[t._v("JSONP 是服务器与客户端跨源通信的常用方法。最大特点就是简单适用，兼容性好（兼容低版本IE），缺点是只支持get请求，不支持post请求。\n核心思想：网页通过添加一个 "),a("code",[t._v("<script>")]),t._v(" 元素，向服务器请求 JSON 数据，服务器收到请求后，将数据放在一个指定名字的回调函数的参数位置传回来。")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 原生实现")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 向服务器发出请求，该请求的查询字符串有一个callback参数，用来指定回调函数的名字")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("script src"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://test.com/api/data?callback=dosomething"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("script"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 处理服务器返回回调函数的数据")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("script type"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"text/javascript"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("dosomething")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("res")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 处理获得的数据")]),t._v("\n        console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("script"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// JQuery ajax")]),t._v("\n$"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ajax")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    url"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'http://www.test.com:8080/login'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    type"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'get'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    dataType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'jsonp'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 请求方式为jsonp")]),t._v("\n    jsonpCallback"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"handleCallback"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 自定义回调函数名")]),t._v("\n    data"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Vue")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$http"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("jsonp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'http://www.domain2.com:8080/login'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    params"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    jsonp"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'handleCallback'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("res")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// React")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" JsonP "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'jsonp'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Axios")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("jsonp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("options")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Promise")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("resolve"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("reject")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("JsonP")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("url"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                param"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'callback'")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("res")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("status "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'success'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("reject")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nAxios"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("jsonp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("url"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'path'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("res")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("catch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   \n")])])]),a("p",[a("strong",[t._v("4.CORS")])]),t._v(" "),a("blockquote",[a("p",[t._v("CORS 是跨域资源分享（Cross-Origin Resource Sharing）的缩写。它是 W3C 标准，属于跨源 AJAX 请求的根本解决方法。\n普通跨域请求：只需服务器端设置Access-Control-Allow-Origin\n带cookie跨域请求：前后端都需要进行设置（根据xhr.withCredentials字段判断是否带有cookie）")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 原生ajax")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" xhr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("XMLHttpRequest")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// IE8/9需用window.XDomainRequest兼容")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 前端设置是否带cookie")]),t._v("\nxhr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("withCredentials "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nxhr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("open")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'post'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'http://www.domain2.com:8080/login'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nxhr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setRequestHeader")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Content-Type'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'application/x-www-form-urlencoded'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nxhr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("send")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'user=admin'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nxhr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onreadystatechange")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("xhr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("readyState "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" xhr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("status "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("xhr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("responseText"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// jQuery ajax ")]),t._v("\n$"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ajax")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   url"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'http://www.test.com:8080/login'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n   type"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'get'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n   data"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n   xhrFields"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       withCredentials"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 前端设置是否带cookie")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n   crossDomain"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 会让请求头中包含跨域的额外信息，但不会含cookie")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// vue-resource")]),t._v("\nVue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("http"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("credentials "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//axios ")]),t._v("\naxios"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("defaults"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("withCredentials "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n")])])]),a("h2",{attrs:{id:"_13-你知道哪些http状态码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_13-你知道哪些http状态码"}},[t._v("#")]),t._v(" 13.你知道哪些HTTP状态码？")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("状态码")]),t._v(" "),a("th",[t._v("类别")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("1xx")]),t._v(" "),a("td",[t._v("Informational（信息状态码）")]),t._v(" "),a("td",[t._v("接受请求正在处理")])]),t._v(" "),a("tr",[a("td",[t._v("2xx")]),t._v(" "),a("td",[t._v("Success（成功状态码）")]),t._v(" "),a("td",[t._v("请求正常处理完毕")])]),t._v(" "),a("tr",[a("td",[t._v("3xx")]),t._v(" "),a("td",[t._v("Redirection（重定向状态码）")]),t._v(" "),a("td",[t._v("需要附加操作已完成请求")])]),t._v(" "),a("tr",[a("td",[t._v("4xx")]),t._v(" "),a("td",[t._v("Client Error（客户端错误状态码）")]),t._v(" "),a("td",[t._v("服务器无法处理请求")])]),t._v(" "),a("tr",[a("td",[t._v("5xx")]),t._v(" "),a("td",[t._v("Server Error（服务器错误状态码）")]),t._v(" "),a("td",[t._v("服务器处理请求出错")])])])]),t._v(" "),a("p",[t._v("常用状态码：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("状态码")]),t._v(" "),a("th",[t._v("状态码英文名称")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("200")]),t._v(" "),a("td",[t._v("OK")]),t._v(" "),a("td",[t._v("请求成功。一般用于GET与POST请求")])]),t._v(" "),a("tr",[a("td",[t._v("204")]),t._v(" "),a("td",[t._v("No Content")]),t._v(" "),a("td",[t._v("无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档")])]),t._v(" "),a("tr",[a("td",[t._v("206")]),t._v(" "),a("td",[t._v("Partial Content")]),t._v(" "),a("td",[t._v("是对资源某一部分的请求，服务器成功处理了部分GET请求，响应报文中包含由Content-Range指定范围的实体内容。")])]),t._v(" "),a("tr",[a("td",[t._v("301")]),t._v(" "),a("td",[t._v("Moved Permanently")]),t._v(" "),a("td",[t._v("永久性重定向。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替")])]),t._v(" "),a("tr",[a("td",[t._v("302")]),t._v(" "),a("td",[t._v("Found")]),t._v(" "),a("td",[t._v("临时性重定向。与301类似。但资源只是临时被移动。客户端应继续使用原有URI")])]),t._v(" "),a("tr",[a("td",[t._v("303")]),t._v(" "),a("td",[t._v("See Other")]),t._v(" "),a("td",[t._v("查看其它地址。与302类似。使用GET请求查看")])]),t._v(" "),a("tr",[a("td",[t._v("304")]),t._v(" "),a("td",[t._v("Not Modified")]),t._v(" "),a("td",[t._v("未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源")])]),t._v(" "),a("tr",[a("td",[t._v("307")]),t._v(" "),a("td",[t._v("Temporary Redirect")]),t._v(" "),a("td",[t._v("临时重定向。与302类似。使用GET请求重定向，会按照浏览器标准，不会从POST变成GET。")])]),t._v(" "),a("tr",[a("td",[t._v("400")]),t._v(" "),a("td",[t._v("Bad Request")]),t._v(" "),a("td",[t._v("客户端请求报文中存在语法错误，服务器无法理解。浏览器会像200 OK一样对待该状态吗")])]),t._v(" "),a("tr",[a("td",[t._v("401")]),t._v(" "),a("td",[t._v("Unauthorized")]),t._v(" "),a("td",[t._v("请求要求用户的身份认证，通过HTTP认证（BASIC认证，DIGEST认证）的认证信息，若之前已进行过一次请求，则表示用户认证失败")])]),t._v(" "),a("tr",[a("td",[t._v("402")]),t._v(" "),a("td",[t._v("Payment Required")]),t._v(" "),a("td",[t._v("保留，将来使用")])]),t._v(" "),a("tr",[a("td",[t._v("403")]),t._v(" "),a("td",[t._v("Forbidden")]),t._v(" "),a("td",[t._v("服务器理解请求客户端的请求，但是拒绝执行此请求")])]),t._v(" "),a("tr",[a("td",[t._v("404")]),t._v(" "),a("td",[t._v("Not Found")]),t._v(" "),a("td",[t._v('服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置"您所请求的资源无法找到"的个性页面。也可以在服务器拒绝请求且不想说明理由时使用')])]),t._v(" "),a("tr",[a("td",[t._v("500")]),t._v(" "),a("td",[t._v("Internal Server Error")]),t._v(" "),a("td",[t._v("服务器内部错误，无法完成请求，也可能是web应用存在bug或某些临时故障")])]),t._v(" "),a("tr",[a("td",[t._v("501")]),t._v(" "),a("td",[t._v("Not Implemented")]),t._v(" "),a("td",[t._v("服务器不支持请求的功能，无法完成请求")])]),t._v(" "),a("tr",[a("td",[t._v("503")]),t._v(" "),a("td",[t._v("Service Unavailable")]),t._v(" "),a("td",[t._v("由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中")])])])]),t._v(" "),a("h2",{attrs:{id:"_14-简述路由原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_14-简述路由原理"}},[t._v("#")]),t._v(" 14.简述路由原理")]),t._v(" "),a("p",[t._v("路由分为后端路由和前端路由。")]),t._v(" "),a("p",[a("strong",[t._v("后端路由")])]),t._v(" "),a("p",[t._v("又称服务器端路由，当服务器收到客户端发来的HTTP请求，就会根据请求的URL，来找到相应的映射函数，然后执行该函数，将执行结果的返回值发送给客户端。")]),t._v(" "),a("p",[t._v("对于最简单的静态资源服务器，可以认为，所有的URL的映射函数就是一个文件读取操作。而对于动态资源，映射函数可能是一个数据库读取操作，也可能是进行一些数据操作，等等。然后根据读取的数据，在服务器端就使用相应的模块来对页面进行渲染后，再返回渲染完毕的页面。这种方式在早期的前端开发中非常普遍，像京东的页面就是一个后端路由，他请求的是一个页面。")]),t._v(" "),a("p",[t._v("优点：安全性好，SEO好。")]),t._v(" "),a("p",[t._v("缺点：加大服务器的压力，不利于用户体验，代码冗合。")]),t._v(" "),a("p",[a("strong",[t._v("前端路由")])]),t._v(" "),a("p",[t._v("URL到函数的映射。路由的映射函数通常是进行一些DOM的显示隐藏操作。当访问不同路径时，就会显示不同的页面组件。")]),t._v(" "),a("p",[t._v("优点：访问不同页面时，仅仅只是变换了路径而已，没有网络延迟，提升了用户体验。")]),t._v(" "),a("p",[t._v("缺点：使用浏览器的前进后退时，会重新发送请求，没有合理的利用缓存，不利于SEO。")]),t._v(" "),a("p",[a("strong",[t._v("前端路由主要有两种实现方案：hash、history API")])]),t._v(" "),a("p",[t._v("**hash：**hash实现就是基于location.hash来实现的，早期前端路由都是用hash。location.hash的值就是URL中#后面的内容。")]),t._v(" "),a("p",[t._v("**history API：**更美观的实现URL的变化，由H5提供的history API。最主要的API：history.pushState()、history.replaceState()。这两个API可以在不刷新的情况下，操作浏览器的历史记录。区别：pushState()是会增加新的历史记录，而replaceState()是替换当前的历史记录。都接受三个参数（state，title，URL）。")]),t._v(" "),a("p",[a("strong",[t._v("hash和history的区别")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("hash")]),t._v(" "),a("th",[t._v("history")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("兼容更好")]),t._v(" "),a("td",[t._v("更正式美观")])]),t._v(" "),a("tr",[a("td",[t._v("只修改#后面内容")]),t._v(" "),a("td",[t._v("可以设置同源下任意URL")])]),t._v(" "),a("tr",[a("td",[t._v("新值不能与旧值相同，一样的不会触发动作将记录添加到栈中")]),t._v(" "),a("td",[t._v("新旧值可以相同，pushSate该添加的会添加到栈中")])]),t._v(" "),a("tr",[a("td",[t._v("对服务器无需改动")]),t._v(" "),a("td",[t._v("刷新时，若服务器没有响应数据或资源，会404。需要对服务器做一些改造，对不同的路由进行相应的设置。")])]),t._v(" "),a("tr",[a("td",[t._v("即不会发送请求")]),t._v(" "),a("td",[t._v("会向服务器发送请求，避免404服务器应该做处理。当匹配不到资源时，应返回同一个html页面")])])])]),t._v(" "),a("h2",{attrs:{id:"_15-简述mobx原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_15-简述mobx原理"}},[t._v("#")]),t._v(" 15.简述mobx原理")]),t._v(" "),a("p",[t._v("核心概念：observable 可观察对象")]),t._v(" "),a("blockquote",[a("p",[t._v("在 mobx 中，我们需要在一个值或一个对象被改变时，触发相应的动作或响应，这种模式就是典型的观察者模式（或发布订阅模式），那么这里一个值或一个对象就是被观察者，动作或者响应充当观察者。\n首先进行对象代理（proxy 或 defineProperty），这样对象就成了observable对象；其次观察者在执行主体逻辑时会访问代理对象属性，这时代理对象主动上报（reportObserved）自己到观察者的观察对象队列（observing）中，同时也会将观察者放入observable对象的观察者队列（observers）中，观察者和被观察者相互存有对方的引用，关系正式确立；最后，当设置代理对象属性时，代理对象触发（reportChanged）观察者执行主体逻辑。")])]),t._v(" "),a("h2",{attrs:{id:"_16-简述promise原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_16-简述promise原理"}},[t._v("#")]),t._v(" 16.简述promise原理")]),t._v(" "),a("blockquote",[a("p",[t._v("Promise 是异步编程的一种解决方案：从语法上讲，promise是一个对象，从它可以获取异步操作的消息；从本意上讲，它是承诺，承诺它过一段时间会给你一个结果。promise有三种状态："),a("strong",[t._v("pending(等待态)，fulfiled(成功态)，rejected(失败态)")]),t._v("；状态一旦改变，就不会再变。创造promise实例后，它会立即执行。")])]),t._v(" "),a("p",[t._v("基本过程：")]),t._v(" "),a("ol",[a("li",[t._v("初始化 Promise 状态（pending）")]),t._v(" "),a("li",[t._v("立即执行 Promise 中传入的 fn 函数，将Promise 内部 resolve、reject 函数作为参数传递给 fn ，按事件机制时机处理")]),t._v(" "),a("li",[t._v("执行 then(..) 注册回调处理数组（then 方法可被同一个 promise 调用多次）")]),t._v(" "),a("li",[t._v("Promise里的关键是要保证，then方法传入的参数 onFulfilled 和 onRejected，必须在then方法被调用的那一轮事件循环之后的新执行栈中执行。")])]),t._v(" "),a("p",[a("strong",[t._v("真正的链式Promise是指在当前promise达到fulfilled状态后，即开始进行下一个promise.")])]),t._v(" "),a("h2",{attrs:{id:"_17-简述async-await原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_17-简述async-await原理"}},[t._v("#")]),t._v(" 17.简述async await原理")]),t._v(" "),a("p",[t._v("async函数就是generator函数的语法糖，将generator函数的*换成async，将yield替换成await。")]),t._v(" "),a("p",[t._v("async函数对generator的改进：")]),t._v(" "),a("ol",[a("li",[t._v("内置执行器。Generator 函数的执行必须依靠执行器，而 async 函数自带执行器，无需手动执行 next() 方法。")]),t._v(" "),a("li",[t._v("更好的语义。async和await，比起星号和yield，语义更清楚了。async表示函数里有异步操作，await表示紧跟在后面的表达式需要等待结果。")]),t._v(" "),a("li",[t._v("更广的适用性。co模块约定，yield命令后面只能是 Thunk 函数或 Promise 对象，而async函数的await命令后面，可以是 Promise 对象和原始类型的值（数值、字符串和布尔值，但这时会自动转成立即 resolved 的 Promise 对象）。")]),t._v(" "),a("li",[t._v("返回值是 Promise。async 函数返回值是 Promise 对象，比 Generator 函数返回的 Iterator 对象方便，可以直接使用 then() 方法进行调用。")])]),t._v(" "),a("blockquote",[a("p",[t._v("Generator 函数是一个状态机，封装了多个内部状态。执行 Generator 函数会返回一个遍历器对象，可以依次遍历 Generator 函数内部的每一个状态，但是只有调用next方法才会遍历下一个内部状态，所以其实提供了一种可以暂停执行的函数。yield表达式就是暂停标志。\n通常，我们把执行生成器的代码封装成一个函数，并把这个执行生成器代码的函数称为执行器,"),a("code",[t._v("co 模块")]),t._v("就是一个著名的执行器。")])]),t._v(" "),a("p",[t._v("async隐式返回 Promise 作为结果的函数,那么可以简单理解为，await后面的函数执行完毕时，await会产生一个微任务(Promise.then是微任务)。但是我们要注意这个微任务产生的时机，它是执行完await之后，直接跳出async函数，执行其他代码(此处就是协程的运作，A暂停执行，控制权交给B)。其他代码执行完毕后，再回到async函数去执行剩下的代码，然后把await后面的代码注册到微任务队列当中。")]),t._v(" "),a("blockquote",[a("p",[t._v("一个线程（或函数）执行到一半，可以暂停执行，将执行权交给另一个线程（或函数），等到稍后收回执行权的时候，再恢复执行。这种可以并行执行、交换执行权的线程（或函数），就称为协程。协程遇到"),a("code",[t._v("yield命令")]),t._v("就暂停，等到执行权返回，再从暂停的地方继续往后执行。它的最大优点，就是代码的写法非常像同步操作，如果去除yield命令，简直一模一样。")])]),t._v(" "),a("h2",{attrs:{id:"_18-什么是虚拟dom"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_18-什么是虚拟dom"}},[t._v("#")]),t._v(" 18.什么是虚拟DOM？")]),t._v(" "),a("p",[t._v("虚拟 DOM 的本质就是 JavaScript 对 象，使用 JavaScript 对象来描述 DOM 的结构。应用的各种状态变化首先作用于虚拟 DOM，最终映射 到 DOM。")]),t._v(" "),a("p",[t._v("前端性能优化的一个秘诀就是尽可能少地操作DOM，不仅仅是DOM相对较慢，更因为频繁变动DOM会造成浏览器的回流或者重回，这些都是性能的杀手，因此我们需要这一层抽象，在patch过程中尽可能地一次性将差异更新到DOM中，这样保证了DOM不会出现性能很差的情况。")]),t._v(" "),a("p",[t._v("其次，现代前端框架的一个基本要求就是无须手动操作DOM，一方面是因为手动操作DOM无法保证程序性能，多人协作的项目中如果review不严格，可能会有开发者写出性能较低的代码，另一方面更重要的是省略手动DOM操作可以大大提高开发效率.")]),t._v(" "),a("p",[t._v("其次，现代前端框架的一个基本要求就是无须手动操作DOM,一方面是因为手动操作DOM无法保证程序性能，多人协作的项目中如果review不严格，可能会有开发者写出性能较低的代码，另一方面更重要的是省略手动DOM操作可以大大提高开发效率。")]),t._v(" "),a("h2",{attrs:{id:"_19-vue如何实现路由拦截"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_19-vue如何实现路由拦截"}},[t._v("#")]),t._v(" 19.vue如何实现路由拦截？")]),t._v(" "),a("p",[a("strong",[t._v("1.全局前置守卫")])]),t._v(" "),a("p",[t._v("使用"),a("code",[t._v("router.beforeEach")]),t._v("注册一个全局前置守卫：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" router "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("VueRouter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nrouter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("beforeEach")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("to"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" from"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("当一个导航触发时，全局前置守卫按照创建顺序调用。守卫是异步解析执行，此时导航在所有守卫 resolve 完之前一直处于"),a("strong",[t._v("等待中")]),t._v("。")]),t._v(" "),a("p",[a("strong",[t._v("2.组件内的守卫")])]),t._v(" "),a("p",[t._v("在路由组件内直接定义以下路由导航守卫：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("beforeRouteEnter")])]),t._v(" "),a("li",[a("code",[t._v("beforeRouteUpdate")]),t._v(" (2.2 新增)")]),t._v(" "),a("li",[a("code",[t._v("beforeRouteLeave")])])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Foo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  template"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("...")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("beforeRouteEnter")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("to"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" from"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在渲染该组件的对应路由被 confirm 前调用")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不！能！获取组件实例 `this`")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 因为当守卫执行前，组件实例还没被创建")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("beforeRouteUpdate")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("to"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" from"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在当前路由改变，但是该组件被复用时调用")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 可以访问组件实例 `this`")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("beforeRouteLeave")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("to"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" from"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 导航离开该组件的对应路由时调用")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 可以访问组件实例 `this`")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"_20-react题-class中请求应该放在哪个生命周期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_20-react题-class中请求应该放在哪个生命周期"}},[t._v("#")]),t._v(" 20.React题，class中请求应该放在哪个生命周期？")]),t._v(" "),a("p",[t._v("放在componentDidMount，它是在组件已经完全挂载到网页上才会调用被执行，所以可以保证数据的加载。此外，在这方法中调用setState方法，会触发重新渲染。所以，官方设计这个方法就是用来加载外部数据用的，或处理其他的副作用代码。")]),t._v(" "),a("p",[t._v("不建议放在constructor，constructor是做组件state初绐化工作，并不是做加载数据这工作的，constructor里也不能setState，还有加载的时间太长或者出错，页面就无法加载出来。所以有副作用的代码都会集中在componentDidMount方法里。")]),t._v(" "),a("p",[t._v("不建议放在componentWillMount，如果认为在componentWillMount里发起请求能提早获得结果，这种想法其实是错误的，通常componentWillMount比componentDidMount早不了多少微秒，网络上任何一点延迟，这一点差异都可忽略不计。且componentWillMount已过时。")]),t._v(" "),a("h2",{attrs:{id:"_21-react题-函数组件中如何执行异步请求操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_21-react题-函数组件中如何执行异步请求操作"}},[t._v("#")]),t._v(" 21.React题，函数组件中如何执行异步请求操作？")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("useEffect")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("fetchData")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("axios")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'请求地址'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 执行其他操作...")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fetchData")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("重点：不允许在"),a("code",[t._v("useEffect")]),t._v("函数中直接使用async，通过在effect内部使用异步函数来实现。")]),t._v(" "),a("h2",{attrs:{id:"_22-react题-usestate为什么不能放在条件里"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_22-react题-usestate为什么不能放在条件里"}},[t._v("#")]),t._v(" 22.React题，useState为什么不能放在条件里？")]),t._v(" "),a("blockquote",[a("p",[t._v("只在最顶层使用 Hook，"),a("strong",[t._v("不要在循环，条件或嵌套函数中调用 Hook，")]),t._v(" 确保总是在你的 React 函数的最顶层调用他们。遵守这条规则，你就能确保 Hook 在每一次渲染中都按照同样的顺序被调用。这让 React 能够在多次的 "),a("code",[t._v("useState")]),t._v(" 和 "),a("code",[t._v("useEffect")]),t._v(" 调用之间保持 hook 状态的正确。")])]),t._v(" "),a("p",[t._v("简单来说，React 靠的是 Hook 调用的顺序知道哪个 state 对应哪个"),a("code",[t._v("useState")]),t._v("。Hook 的调用顺序在每次渲染中都是相同的，所以它能够正常工作。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ------------")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 首次渲染")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ------------")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("useState")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Mary'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("           "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1. 使用 'Mary' 初始化变量名为 name 的 state")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("useEffect")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("persistForm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2. 添加 effect 以保存 form 操作")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("useState")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Poppins'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3. 使用 'Poppins' 初始化变量名为 surname 的 state")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("useEffect")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("updateTitle"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 4. 添加 effect 以更新标题")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// -------------")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 二次渲染")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// -------------")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("useState")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Mary'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("           "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1. 读取变量名为 name 的 state（参数被忽略）")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("useEffect")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("persistForm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2. 替换保存 form 的 effect")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("useState")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Poppins'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3. 读取变量名为 surname 的 state（参数被忽略）")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("useEffect")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("updateTitle"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 4. 替换更新标题的 effect")]),t._v("\n")])])]),a("h2",{attrs:{id:"_22-react题-setstate是异步还是同步"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_22-react题-setstate是异步还是同步"}},[t._v("#")]),t._v(" 22.React题，setState是异步还是同步？")]),t._v(" "),a("p",[t._v("有时表现出异步，有时表现出同步：")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("setState")]),t._v("只在合成事件和钩子函数中是“异步”的，在原生事件和"),a("code",[t._v("setTimeout")]),t._v(" 中都是同步的。")]),t._v(" "),a("li",[a("code",[t._v("setState")]),t._v(" 的“异步”并不是说内部由异步代码实现，其实本身执行的过程和代码都是同步的，只是合成事件和钩子函数的调用顺序在更新之前，导致在合成事件和钩子函数中没法立马拿到更新后的值，形成了所谓的“异步”，当然可以通过第二个参数 "),a("code",[t._v("setState(partialState, callback)")]),t._v(" 中的"),a("code",[t._v("callback")]),t._v("拿到更新后的结果。")]),t._v(" "),a("li",[a("code",[t._v("setState")]),t._v(" 的批量更新优化也是建立在“异步”（合成事件、钩子函数）之上的，在原生事件和setTimeout 中不会批量更新，在“异步”中如果对同一个值进行多次"),a("code",[t._v("setState")]),t._v("，"),a("code",[t._v("setState")]),t._v("的批量更新策略会对其进行覆盖，取最后一次的执行，如果是同时"),a("code",[t._v("setState")]),t._v("多个不同的值，在更新时会对其进行合并批量更新。")])]),t._v(" "),a("p",[t._v("23.React题，你对shouldComponentUpdate的理解")]),t._v(" "),a("p",[t._v("根据 "),a("code",[t._v("shouldComponentUpdate()")]),t._v(" 的返回值，判断 React 组件的输出是否受当前 state 或 props 更改的影响。默认行为是 state 每次发生变化组件都会重新渲染。大部分情况下，你应该遵循默认行为。")]),t._v(" "),a("p",[t._v("当 props 或 state 发生变化时，"),a("code",[t._v("shouldComponentUpdate()")]),t._v(" 会在渲染执行之前被调用。返回值默认为 true。首次渲染或使用 "),a("code",[t._v("forceUpdate()")]),t._v(" 时不会调用该方法。")]),t._v(" "),a("p",[t._v("此方法仅作为**"),a("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//react.docschina.org/docs/optimizing-performance.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("性能优化的方式"),a("OutboundLink")],1),a("strong",[t._v("而存在。不要企图依靠此方法来“阻止”渲染，因为这可能会产生 bug。你应该")]),t._v("考虑使用内置的** "),a("strong",[a("code",[t._v("PureComponent")])]),t._v(" "),a("strong",[t._v("组件")]),t._v("，而不是手动编写 "),a("code",[t._v("shouldComponentUpdate()")]),t._v("。"),a("code",[t._v("PureComponent")]),t._v(" 会对 props 和 state 进行浅层比较，并减少了跳过必要更新的可能性。")]),t._v(" "),a("p",[t._v("如果你一定要手动编写此函数，可以将 "),a("code",[t._v("this.props")]),t._v(" 与 "),a("code",[t._v("nextProps")]),t._v(" 以及 "),a("code",[t._v("this.state")]),t._v(" 与"),a("code",[t._v("nextState")]),t._v(" 进行比较，并返回 "),a("code",[t._v("false")]),t._v(" 以告知 React 可以跳过更新。请注意，返回 "),a("code",[t._v("false")]),t._v(" 并不会阻止子组件在 state 更改时重新渲染。")]),t._v(" "),a("p",[t._v("不建议在 "),a("code",[t._v("shouldComponentUpdate()")]),t._v(" 中进行深层比较或使用 "),a("code",[t._v("JSON.stringify()")]),t._v("。这样非常影响效率，且会损害性能。")]),t._v(" "),a("p",[t._v("目前，如果 "),a("code",[t._v("shouldComponentUpdate()")]),t._v(" 返回 "),a("code",[t._v("false")]),t._v("，则不会调用 "),a("code",[t._v("UNSAFE_componentWillUpdate()")]),t._v("，"),a("code",[t._v("render()")]),t._v(" 和 "),a("code",[t._v("componentDidUpdate()")]),t._v("。后续版本，React 可能会将 "),a("code",[t._v("shouldComponentUpdate")]),t._v(" 视为提示而不是严格的指令，并且，当返回 "),a("code",[t._v("false")]),t._v(" 时，仍可能导致组件重新渲染。")]),t._v(" "),a("h2",{attrs:{id:"_24-react题-component和purecomponent区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_24-react题-component和purecomponent区别"}},[t._v("#")]),t._v(" 24.React题，component和PureComponent区别？")]),t._v(" "),a("p",[a("code",[t._v("Component")]),t._v("是"),a("code",[t._v("class")]),t._v("组件的根基，类组件一切始于"),a("code",[t._v("Component")]),t._v(" ，在"),a("code",[t._v("React.Component")]),t._v("的子类中有个必须定义的 render() 函数。")]),t._v(" "),a("p",[a("code",[t._v("React.PureComponent")]),t._v(" 与 "),a("code",[t._v("React.Component")]),t._v(" 很相似。两者的区别在于 "),a("code",[t._v("React.Component")]),t._v(" 并未实现 "),a("code",[t._v("shouldComponentUpdate()")]),t._v("，而 "),a("code",[t._v("React.PureComponent")]),t._v(" 中以浅层对比 prop 和 state 的方式来实现了该函数。")]),t._v(" "),a("p",[t._v("如果赋予 React 组件相同的 props 和 state，"),a("code",[t._v("render()")]),t._v(" 函数会渲染相同的内容，那么在某些情况下使用 "),a("code",[t._v("React.PureComponent")]),t._v(" 可提高性能。")]),t._v(" "),a("blockquote",[a("p",[t._v("注意\n"),a("code",[t._v("React.PureComponent")]),t._v(" 中的 "),a("code",[t._v("shouldComponentUpdate()")]),t._v(" 仅作对象的浅层比较。如果对象中包含复杂的数据结构，则有可能因为无法检查深层的差别，产生错误的比对结果。仅在你的 props 和 state 较为简单时，才使用 "),a("code",[t._v("React.PureComponent")]),t._v("，或者在深层数据结构发生变化时调用 "),a("code",[t._v("forceUpdate()")]),t._v(" 来确保组件被正确地更新。你也可以考虑使用 "),a("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//facebook.github.io/immutable-js/",target:"_blank",rel:"noopener noreferrer"}},[t._v("immutable 对象"),a("OutboundLink")],1),t._v("加速嵌套数据的比较。\n此外，"),a("code",[t._v("React.PureComponent")]),t._v(" 中的 "),a("code",[t._v("shouldComponentUpdate()")]),t._v(" 将跳过所有子组件树的 prop 更新。因此，请确保所有子组件也都是“纯”的组件。")])]),t._v(" "),a("h2",{attrs:{id:"_25-react题-如何用useeffect实现class的生命周期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_25-react题-如何用useeffect实现class的生命周期"}},[t._v("#")]),t._v(" 25.React题，如何用useEffect实现class的生命周期？")]),t._v(" "),a("p",[t._v("1."),a("code",[t._v("useEffect")]),t._v("实现"),a("code",[t._v("componentDidMount")]),t._v("的效果：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("useEffect")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// TODO")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// useEffect 的第二个参数为[]时，")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 表示这个effect只会在componentDidMount和componentWillUnMount的时候调用")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// componentWillUnMount调用的是第一个参数返回的回调")]),t._v("\n")])])]),a("p",[t._v("2.使用"),a("code",[t._v("useEffect")]),t._v("实现"),a("code",[t._v("componentDidUpdate")]),t._v("的效果：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("useEffect")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("handleStatusChange")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("status")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setIsOnline")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("status"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isOnline"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  ChatAPI"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("subscribeToFriendStatus")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("props"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("friend"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" handleStatusChange"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    ChatAPI"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("unsubscribeFromFriendStatus")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("props"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("friend"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" handleStatusChange"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("props"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("friend"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 仅在 props.friend.id 发生变化时，重新订阅")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("**提示：**与 "),a("code",[t._v("componentDidMount")]),t._v(" 或 "),a("code",[t._v("componentDidUpdate")]),t._v(" 不同，使用 "),a("code",[t._v("useEffect")]),t._v(" 调度的 effect 不会阻塞浏览器更新屏幕，这让你的应用看起来响应更快。大多数情况下，effect 不需要同步地执行。在个别情况下（例如测量布局），有单独的 "),a("code",[t._v("useLayoutEffect")]),t._v(" Hook 供你使用，其 API 与 "),a("code",[t._v("useEffect")]),t._v(" 相同。")])]),t._v(" "),a("h2",{attrs:{id:"_26-react题-usememo与usecallback区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_26-react题-usememo与usecallback区别"}},[t._v("#")]),t._v(" 26.React题，useMemo与useCallback区别？")]),t._v(" "),a("p",[a("code",[t._v("useMemo")]),t._v(" 和 "),a("code",[t._v("useCallback")]),t._v(" 接收的参数都是一样,第一个参数为回调 第二个参数为要依赖的数据")]),t._v(" "),a("p",[t._v("**共同作用：\n**1.仅仅 "),a("code",[t._v("依赖数据")]),t._v(" 发生变化, 才会重新计算结果，也就是起到缓存的作用。")]),t._v(" "),a("p",[t._v("**两者区别：\n**1."),a("code",[t._v("useMemo")]),t._v(" 计算结果是 "),a("code",[t._v("return")]),t._v(" 回来的值, 主要用于 缓存计算结果的值 ，应用场景如： 需要 计算的状态\n2."),a("code",[t._v("useCallback")]),t._v(" 计算结果是 "),a("code",[t._v("函数")]),t._v(", 主要用于 缓存函数，应用场景如: 需要缓存的函数，因为函数式组件每次任何一个 state 的变化 整个组件 都会被重新刷新，一些函数是没有必要被重新刷新的，此时就应该缓存起来，提高性能，和减少资源浪费。")]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("useCallback(fn, deps)")]),t._v(" 相当于 "),a("code",[t._v("useMemo(() => fn, deps)")]),t._v("。")])]),t._v(" "),a("p",[t._v("注意： 不要滥用会造成性能浪费，react中减少render就能提高性能，所以这个仅仅只针对缓存能减少重复渲染时使用和缓存计算结果。")]),t._v(" "),a("h2",{attrs:{id:"_27-顺时针循环打印二维数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_27-顺时针循环打印二维数组"}},[t._v("#")]),t._v(" 27.顺时针循环打印二维数组")]),t._v(" "),a("p",[a("em",[t._v("有一个 n x n 的二维数组，从 [0,0] 元素开始，顺时针循环打印出该数组内容。")])]),t._v(" "),a("ul",[a("li",[t._v("输入：const array = [[1,2,3],[4,5,6],[7,8,9]]")]),t._v(" "),a("li",[t._v("输出：print(array) // 1,2,3,6,9,8,7,4,5")])]),t._v(" "),a("p",[a("em",[t._v("(暂时没有找到比较好的写法 ，大佬还请给个思路。)")])])])}),[],!1,null,null,null);s.default=e.exports}}]);