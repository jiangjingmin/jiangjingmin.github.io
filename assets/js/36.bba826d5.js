(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{432:function(e,t,n){"use strict";n.r(t);var s=n(28),a=Object(s.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"跨域"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#跨域"}},[e._v("#")]),e._v(" 跨域")]),e._v(" "),n("h2",{attrs:{id:"一、什么是跨域"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一、什么是跨域"}},[e._v("#")]),e._v(" 一、什么是跨域？")]),e._v(" "),n("p",[e._v("跨域：指的是浏览器不能执行其他网站的脚本。它是由浏览器的"),n("strong",[e._v("同源策略")]),e._v("造成的，是浏览器对javascript施加的安全限制。")]),e._v(" "),n("h3",{attrs:{id:"_1-什么是同源策略及其限制内容"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是同源策略及其限制内容"}},[e._v("#")]),e._v(" 1.什么是同源策略及其限制内容？")]),e._v(" "),n("p",[e._v('同源策略是一种约定，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到XSS、CSRF等攻击。所谓同源是指"协议+域名+端口"三者相同，即便两个不同的域名指向同一个ip地址，也非同源。')]),e._v(" "),n("p",[n("img",{attrs:{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/5/23/1638b3579d9eeb32~tplv-t2oaga2asx-watermark.awebp",alt:"url的组成"}})]),e._v(" "),n("p",[n("strong",[e._v("同源策略限制内容有：")])]),e._v(" "),n("ul",[n("li",[e._v("Cookie、LocalStorage、IndexedDB 等存储性内容")]),e._v(" "),n("li",[e._v("DOM 节点")]),e._v(" "),n("li",[e._v("AJAX 请求发送后，结果被浏览器拦截了")])]),e._v(" "),n("p",[e._v("但是有三个标签是允许跨域加载资源：")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("<img src=XXX>")])]),e._v(" "),n("li",[n("code",[e._v("<link href=XXX>")])]),e._v(" "),n("li",[n("code",[e._v("<script src=XXX>")])])]),e._v(" "),n("h3",{attrs:{id:"_2-常见跨域场景"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-常见跨域场景"}},[e._v("#")]),e._v(" 2.常见跨域场景")]),e._v(" "),n("p",[n("strong",[e._v("当协议、子域名、主域名、端口号中任意一个不相同时，都算作不同域")]),e._v("。不同域之间相互请求资源，就算作“跨域”。常见跨域场景如下图所示：")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/5/23/1638b3579dde630e~tplv-t2oaga2asx-watermark.awebp",alt:"img"}})]),e._v(" "),n("p",[e._v("特别说明两点：")]),e._v(" "),n("p",[n("strong",[e._v("第一：如果是协议和端口造成的跨域问题“前台”是无能为力的。")])]),e._v(" "),n("p",[n("strong",[e._v("第二：在跨域问题上，仅仅是通过“URL的首部”来识别而不会根据域名对应的IP地址是否相同来判断。“URL的首部”可以理解为“协议, 域名和端口必须匹配”")]),e._v("。")]),e._v(" "),n("p",[e._v("这里你或许有个疑问："),n("strong",[e._v("请求跨域了，那么请求到底发出去没有？")])]),e._v(" "),n("p",[n("strong",[e._v("跨域并不是请求发不出去，请求能发出去，服务端能收到请求并正常返回结果，只是结果被浏览器拦截了")]),e._v("。你可能会疑问明明通过表单的方式可以发起跨域请求，为什么 Ajax 就不会?因为归根结底，跨域是为了阻止用户读取到另一个域名下的内容，Ajax 可以获取响应，浏览器认为这不安全，所以拦截了响应。但是表单并不会获取新的内容，所以可以发起跨域请求。同时也说明了跨域并不能完全阻止 CSRF，因为请求毕竟是发出去了。")]),e._v(" "),n("h2",{attrs:{id:"二、跨域解决方案"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二、跨域解决方案"}},[e._v("#")]),e._v(" 二、跨域解决方案")]),e._v(" "),n("h3",{attrs:{id:"_1-jsonp"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-jsonp"}},[e._v("#")]),e._v(" 1.jsonp")]),e._v(" "),n("h4",{attrs:{id:"_1-jsonp原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-jsonp原理"}},[e._v("#")]),e._v(" 1) JSONP原理")]),e._v(" "),n("p",[n("strong",[e._v("利用 "),n("code",[e._v("<script>")]),e._v(" 标签没有跨域限制的漏洞，网页可以得到从其他来源动态产生的 JSON 数据。JSONP请求一定需要对方的服务器做支持才可以。")])]),e._v(" "),n("h4",{attrs:{id:"_2-jsonp和ajax对比"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-jsonp和ajax对比"}},[e._v("#")]),e._v(" 2) JSONP和AJAX对比")]),e._v(" "),n("p",[e._v("JSONP和AJAX相同，都是客户端向服务器端发送请求，从服务器端获取数据的方式。但AJAX属于同源策略，JSONP属于非同源策略（跨域请求）")]),e._v(" "),n("h4",{attrs:{id:"_3-jsonp优缺点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-jsonp优缺点"}},[e._v("#")]),e._v(" 3) JSONP优缺点")]),e._v(" "),n("p",[e._v("JSONP优点是简单兼容性好，可用于解决主流浏览器的跨域数据访问的问题。"),n("strong",[e._v("缺点是仅支持get方法具有局限性,不安全可能会遭受XSS攻击。")])]),e._v(" "),n("h4",{attrs:{id:"_4-jsonp的实现流程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-jsonp的实现流程"}},[e._v("#")]),e._v(" 4) JSONP的实现流程")]),e._v(" "),n("ul",[n("li",[e._v("声明一个回调函数，其函数名(如show)当做参数值，要传递给跨域请求数据的服务器，函数形参为要获取目标数据(服务器返回的data)。")]),e._v(" "),n("li",[e._v("创建一个"),n("code",[e._v("<script>")]),e._v("标签，把那个跨域的API数据接口地址，赋值给script的src,还要在这个地址中向服务器传递该函数名（可以通过问号传参:?callback=show）。")]),e._v(" "),n("li",[e._v("服务器接收到请求后，需要进行特殊的处理：把传递进来的函数名和它需要给你的数据拼接成一个字符串,例如：传递进去的函数名是show，它准备好的数据是"),n("code",[e._v("show('我不爱你')")]),e._v("。")]),e._v(" "),n("li",[e._v("最后服务器把准备的数据通过HTTP协议返回给客户端，客户端再调用执行之前声明的回调函数（show），对返回的数据进行操作。")])]),e._v(" "),n("p",[e._v("在开发中可能会遇到多个 JSONP 请求的回调函数名是相同的，这时候就需要自己封装一个 JSONP函数。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// index.html\nfunction jsonp({ url, params, callback }) {\n  return new Promise((resolve, reject) => {\n    let script = document.createElement('script')\n    window[callback] = function(data) {\n      resolve(data)\n      document.body.removeChild(script)\n    }\n    params = { ...params, callback } // wd=b&callback=show\n    let arrs = []\n    for (let key in params) {\n      arrs.push(`${key}=${params[key]}`)\n    }\n    script.src = `${url}?${arrs.join('&')}`\n    document.body.appendChild(script)\n  })\n}\njsonp({\n  url: 'http://localhost:3000/say',\n  params: { wd: 'Iloveyou' },\n  callback: 'show'\n}).then(data => {\n  console.log(data)\n})\n复制代码\n")])])]),n("p",[e._v("上面这段代码相当于向"),n("code",[e._v("http://localhost:3000/say?wd=Iloveyou&callback=show")]),e._v("这个地址请求数据，然后后台返回"),n("code",[e._v("show('我不爱你')")]),e._v("，最后会运行show()这个函数，打印出'我不爱你'")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// server.js\nlet express = require('express')\nlet app = express()\napp.get('/say', function(req, res) {\n  let { wd, callback } = req.query\n  console.log(wd) // Iloveyou\n  console.log(callback) // show\n  res.end(`${callback}('我不爱你')`)\n})\napp.listen(3000)\n复制代码\n")])])]),n("h4",{attrs:{id:"_5-jquery的jsonp形式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-jquery的jsonp形式"}},[e._v("#")]),e._v(" 5) jQuery的jsonp形式")]),e._v(" "),n("p",[n("strong",[e._v("JSONP都是GET和异步请求的，不存在其他的请求方式和同步请求，且jQuery默认就会给JSONP的请求清除缓存。")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('$.ajax({\nurl:"http://crossdomain.com/jsonServerResponse",\ndataType:"jsonp",\ntype:"get",//可以省略\njsonpCallback:"show",//->自定义传递给服务器的函数名，而不是使用jQuery自动生成的，可省略\njsonp:"callback",//->把传递函数名的那个形参callback，可省略\nsuccess:function (data){\nconsole.log(data);}\n});\n复制代码\n')])])]),n("h3",{attrs:{id:"_2-cors"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-cors"}},[e._v("#")]),e._v(" 2.cors")]),e._v(" "),n("p",[n("strong",[e._v("CORS 需要浏览器和后端同时支持。IE 8 和 9 需要通过 XDomainRequest 来实现")]),e._v("。")]),e._v(" "),n("p",[e._v("浏览器会自动进行 CORS 通信，实现 CORS 通信的关键是后端。只要后端实现了 CORS，就实现了跨域。")]),e._v(" "),n("p",[e._v("服务端设置 Access-Control-Allow-Origin 就可以开启 CORS。 该属性表示哪些域名可以访问资源，如果设置通配符则表示所有网站都可以访问资源。")]),e._v(" "),n("p",[e._v("虽然设置 CORS 和前端没什么关系，但是通过这种方式解决跨域问题的话，会在发送请求时出现两种情况，分别为"),n("strong",[e._v("简单请求")]),e._v("和"),n("strong",[e._v("复杂请求")]),e._v("。")]),e._v(" "),n("h4",{attrs:{id:"_1-简单请求"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-简单请求"}},[e._v("#")]),e._v(" 1) 简单请求")]),e._v(" "),n("p",[e._v("只要同时满足以下两大条件，就属于简单请求")]),e._v(" "),n("p",[e._v("条件1：使用下列方法之一：")]),e._v(" "),n("ul",[n("li",[e._v("GET")]),e._v(" "),n("li",[e._v("HEAD")]),e._v(" "),n("li",[e._v("POST")])]),e._v(" "),n("p",[e._v("条件2：Content-Type 的值仅限于下列三者之一：")]),e._v(" "),n("ul",[n("li",[e._v("text/plain")]),e._v(" "),n("li",[e._v("multipart/form-data")]),e._v(" "),n("li",[e._v("application/x-www-form-urlencoded")])]),e._v(" "),n("p",[e._v("请求中的任意 XMLHttpRequestUpload 对象均没有注册任何事件监听器； XMLHttpRequestUpload 对象可以使用 XMLHttpRequest.upload 属性访问。")]),e._v(" "),n("h4",{attrs:{id:"_2-复杂请求"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-复杂请求"}},[e._v("#")]),e._v(" 2) 复杂请求")]),e._v(" "),n("p",[e._v('不符合以上条件的请求就肯定是复杂请求了。 复杂请求的CORS请求，会在正式通信之前，增加一次HTTP查询请求，称为"预检"请求,该请求是 option 方法的，通过该请求来知道服务端是否允许跨域请求。')]),e._v(" "),n("p",[e._v("我们用"),n("code",[e._v("PUT")]),e._v("向后台请求时，属于复杂请求，后台需做如下配置：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 允许哪个方法访问我\nres.setHeader('Access-Control-Allow-Methods', 'PUT')\n// 预检的存活时间\nres.setHeader('Access-Control-Max-Age', 6)\n// OPTIONS请求不做任何处理\nif (req.method === 'OPTIONS') {\n  res.end() \n}\n// 定义后台返回的内容\napp.put('/getData', function(req, res) {\n  console.log(req.headers)\n  res.end('我不爱你')\n})\n复制代码\n")])])]),n("p",[e._v("接下来我们看下一个完整复杂请求的例子，并且介绍下CORS请求相关的字段")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// index.html\nlet xhr = new XMLHttpRequest()\ndocument.cookie = 'name=xiamen' // cookie不能跨域\nxhr.withCredentials = true // 前端设置是否带cookie\nxhr.open('PUT', 'http://localhost:4000/getData', true)\nxhr.setRequestHeader('name', 'xiamen')\nxhr.onreadystatechange = function() {\n  if (xhr.readyState === 4) {\n    if ((xhr.status >= 200 && xhr.status < 300) || xhr.status === 304) {\n      console.log(xhr.response)\n      //得到响应头，后台需设置Access-Control-Expose-Headers\n      console.log(xhr.getResponseHeader('name'))\n    }\n  }\n}\nxhr.send()\n复制代码\n//server1.js\nlet express = require('express');\nlet app = express();\napp.use(express.static(__dirname));\napp.listen(3000);\n复制代码\n//server2.js\nlet express = require('express')\nlet app = express()\nlet whitList = ['http://localhost:3000'] //设置白名单\napp.use(function(req, res, next) {\n  let origin = req.headers.origin\n  if (whitList.includes(origin)) {\n    // 设置哪个源可以访问我\n    res.setHeader('Access-Control-Allow-Origin', origin)\n    // 允许携带哪个头访问我\n    res.setHeader('Access-Control-Allow-Headers', 'name')\n    // 允许哪个方法访问我\n    res.setHeader('Access-Control-Allow-Methods', 'PUT')\n    // 允许携带cookie\n    res.setHeader('Access-Control-Allow-Credentials', true)\n    // 预检的存活时间\n    res.setHeader('Access-Control-Max-Age', 6)\n    // 允许返回的头\n    res.setHeader('Access-Control-Expose-Headers', 'name')\n    if (req.method === 'OPTIONS') {\n      res.end() // OPTIONS请求不做任何处理\n    }\n  }\n  next()\n})\napp.put('/getData', function(req, res) {\n  console.log(req.headers)\n  res.setHeader('name', 'jw') //返回一个响应头，后台需设置\n  res.end('我不爱你')\n})\napp.get('/getData', function(req, res) {\n  console.log(req.headers)\n  res.end('我不爱你')\n})\napp.use(express.static(__dirname))\napp.listen(4000)\n复制代码\n")])])]),n("p",[e._v("上述代码由"),n("code",[e._v("http://localhost:3000/index.html")]),e._v("向"),n("code",[e._v("http://localhost:4000/")]),e._v("跨域请求，正如我们上面所说的，后端是实现 CORS 通信的关键。")]),e._v(" "),n("h3",{attrs:{id:"_3-postmessage"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-postmessage"}},[e._v("#")]),e._v(" 3.postMessage")]),e._v(" "),n("p",[e._v("postMessage是HTML5 XMLHttpRequest Level 2中的API，且是为数不多可以跨域操作的window属性之一，它可用于解决以下方面的问题：")]),e._v(" "),n("ul",[n("li",[e._v("页面和其打开的新窗口的数据传递")]),e._v(" "),n("li",[e._v("多窗口之间消息传递")]),e._v(" "),n("li",[e._v("页面与嵌套的iframe消息传递")]),e._v(" "),n("li",[e._v("上面三个场景的跨域数据传递")])]),e._v(" "),n("p",[n("strong",[e._v("postMessage()方法允许来自不同源的脚本采用异步方式进行有限的通信，可以实现跨文本档、多窗口、跨域消息传递")]),e._v("。")]),e._v(" "),n("blockquote",[n("p",[e._v("otherWindow.postMessage(message, targetOrigin, [transfer]);")])]),e._v(" "),n("ul",[n("li",[e._v("message: 将要发送到其他 window的数据。")]),e._v(" "),n("li",[e._v('targetOrigin:通过窗口的origin属性来指定哪些窗口能接收到消息事件，其值可以是字符串"*"（表示无限制）或者一个URI。在发送消息的时候，如果目标窗口的协议、主机地址或端口这三者的任意一项不匹配targetOrigin提供的值，那么消息就不会被发送；只有三者完全匹配，消息才会被发送。')]),e._v(" "),n("li",[e._v("transfer(可选)：是一串和message 同时传递的 Transferable 对象. 这些对象的所有权将被转移给消息的接收方，而发送一方将不再保有所有权。")])]),e._v(" "),n("p",[e._v("接下来我们看个例子： "),n("code",[e._v("http://localhost:3000/a.html")]),e._v("页面向"),n("code",[e._v("http://localhost:4000/b.html")]),e._v('传递“我爱你”,然后后者传回"我不爱你"。')]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// a.html\n  <iframe src=\"http://localhost:4000/b.html\" frameborder=\"0\" id=\"frame\" onload=\"load()\"></iframe> //等它加载完触发一个事件\n  //内嵌在http://localhost:3000/a.html\n    <script>\n      function load() {\n        let frame = document.getElementById('frame')\n        frame.contentWindow.postMessage('我爱你', 'http://localhost:4000') //发送数据\n        window.onmessage = function(e) { //接受返回数据\n          console.log(e.data) //我不爱你\n        }\n      }\n    <\/script>\n复制代码\n// b.html\n  window.onmessage = function(e) {\n    console.log(e.data) //我爱你\n    e.source.postMessage('我不爱你', e.origin)\n }\n复制代码\n")])])]),n("h3",{attrs:{id:"_4-websocket"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-websocket"}},[e._v("#")]),e._v(" 4.websocket")]),e._v(" "),n("p",[e._v("Websocket是HTML5的一个持久化的协议，它实现了浏览器与服务器的全双工通信，同时也是跨域的一种解决方案。WebSocket和HTTP都是应用层协议，都基于 TCP 协议。但是 "),n("strong",[e._v("WebSocket 是一种双向通信协议，在建立连接之后，WebSocket 的 server 与 client 都能主动向对方发送或接收数据")]),e._v("。同时，WebSocket 在建立连接时需要借助 HTTP 协议，连接建立好了之后 client 与 server 之间的双向通信就与 HTTP 无关了。")]),e._v(" "),n("p",[e._v("原生WebSocket API使用起来不太方便，我们使用"),n("code",[e._v("Socket.io")]),e._v("，它很好地封装了webSocket接口，提供了更简单、灵活的接口，也对不支持webSocket的浏览器提供了向下兼容。")]),e._v(" "),n("p",[e._v("我们先来看个例子：本地文件socket.html向"),n("code",[e._v("localhost:3000")]),e._v("发生数据和接受数据")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// socket.html\n<script>\n    let socket = new WebSocket('ws://localhost:3000');\n    socket.onopen = function () {\n      socket.send('我爱你');//向服务器发送数据\n    }\n    socket.onmessage = function (e) {\n      console.log(e.data);//接收服务器返回的数据\n    }\n<\/script>\n复制代码\n// server.js\nlet express = require('express');\nlet app = express();\nlet WebSocket = require('ws');//记得安装ws\nlet wss = new WebSocket.Server({port:3000});\nwss.on('connection',function(ws) {\n  ws.on('message', function (data) {\n    console.log(data);\n    ws.send('我不爱你')\n  });\n})\n复制代码\n")])])]),n("h3",{attrs:{id:"_5-node中间件代理-两次跨域"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-node中间件代理-两次跨域"}},[e._v("#")]),e._v(" 5. Node中间件代理(两次跨域)")]),e._v(" "),n("p",[e._v("实现原理："),n("strong",[e._v("同源策略是浏览器需要遵循的标准，而如果是服务器向服务器请求就无需遵循同源策略。")]),e._v(" 代理服务器，需要做以下几个步骤：")]),e._v(" "),n("ul",[n("li",[n("p",[e._v("接受客户端请求 。")])]),e._v(" "),n("li",[n("p",[e._v("将请求 转发给服务器。")])]),e._v(" "),n("li",[n("p",[e._v("拿到服务器 响应 数据。")])]),e._v(" "),n("li",[n("p",[e._v("将 响应 转发给客户端。")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/1/17/1685c5bed77e7788~tplv-t2oaga2asx-watermark.awebp",alt:"img"}})])])]),e._v(" "),n("p",[e._v("我们先来看个例子：本地文件index.html文件，通过代理服务器"),n("code",[e._v("http://localhost:3000")]),e._v("向目标服务器"),n("code",[e._v("http://localhost:4000")]),e._v("请求数据。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// index.html(http://127.0.0.1:5500)\n <script src=\"https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js\"><\/script>\n    <script>\n      $.ajax({\n        url: 'http://localhost:3000',\n        type: 'post',\n        data: { name: 'xiamen', password: '123456' },\n        contentType: 'application/json;charset=utf-8',\n        success: function(result) {\n          console.log(result) // {\"title\":\"fontend\",\"password\":\"123456\"}\n        },\n        error: function(msg) {\n          console.log(msg)\n        }\n      })\n     <\/script>\n复制代码\n// server1.js 代理服务器(http://localhost:3000)\nconst http = require('http')\n// 第一步：接受客户端请求\nconst server = http.createServer((request, response) => {\n  // 代理服务器，直接和浏览器直接交互，需要设置CORS 的首部字段\n  response.writeHead(200, {\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Methods': '*',\n    'Access-Control-Allow-Headers': 'Content-Type'\n  })\n  // 第二步：将请求转发给服务器\n  const proxyRequest = http\n    .request(\n      {\n        host: '127.0.0.1',\n        port: 4000,\n        url: '/',\n        method: request.method,\n        headers: request.headers\n      },\n      serverResponse => {\n        // 第三步：收到服务器的响应\n        var body = ''\n        serverResponse.on('data', chunk => {\n          body += chunk\n        })\n        serverResponse.on('end', () => {\n          console.log('The data is ' + body)\n          // 第四步：将响应结果转发给浏览器\n          response.end(body)\n        })\n      }\n    )\n    .end()\n})\nserver.listen(3000, () => {\n  console.log('The proxyServer is running at http://localhost:3000')\n})\n复制代码\n// server2.js(http://localhost:4000)\nconst http = require('http')\nconst data = { title: 'fontend', password: '123456' }\nconst server = http.createServer((request, response) => {\n  if (request.url === '/') {\n    response.end(JSON.stringify(data))\n  }\n})\nserver.listen(4000, () => {\n  console.log('The server is running at http://localhost:4000')\n})\n复制代码\n")])])]),n("p",[e._v("上述代码经过两次跨域，值得注意的是浏览器向代理服务器发送请求，也遵循同源策略，最后在index.html文件打印出"),n("code",[e._v('{"title":"fontend","password":"123456"}')])]),e._v(" "),n("h3",{attrs:{id:"_6-nginx反向代理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-nginx反向代理"}},[e._v("#")]),e._v(" 6.nginx反向代理")]),e._v(" "),n("p",[e._v("实现原理类似于Node中间件代理，需要你搭建一个中转nginx服务器，用于转发请求。")]),e._v(" "),n("p",[e._v("使用nginx反向代理实现跨域，是最简单的跨域方式。只需要修改nginx的配置即可解决跨域问题，支持所有浏览器，支持session，不需要修改任何代码，并且不会影响服务器性能。")]),e._v(" "),n("p",[e._v("实现思路：通过nginx配置一个代理服务器（域名与domain1相同，端口不同）做跳板机，反向代理访问domain2接口，并且可以顺便修改cookie中domain信息，方便当前域cookie写入，实现跨域登录。")]),e._v(" "),n("p",[e._v("先下载"),n("a",{attrs:{href:"https://link.juejin.cn?target=http%3A%2F%2Fnginx.org%2Fen%2Fdownload.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("nginx"),n("OutboundLink")],1),e._v("，然后将nginx目录下的nginx.conf修改如下:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// proxy服务器\nserver {\n    listen       81;\n    server_name  www.domain1.com;\n    location / {\n        proxy_pass   http://www.domain2.com:8080;  #反向代理\n        proxy_cookie_domain www.domain2.com www.domain1.com; #修改cookie里域名\n        index  index.html index.htm;\n\n        # 当用webpack-dev-server等中间件代理接口访问nignx时，此时无浏览器参与，故没有同源限制，下面的跨域配置可不启用\n        add_header Access-Control-Allow-Origin http://www.domain1.com;  #当前端只跨域不带cookie时，可为*\n        add_header Access-Control-Allow-Credentials true;\n    }\n}\n复制代码\n")])])]),n("p",[e._v("最后通过命令行"),n("code",[e._v("nginx -s reload")]),e._v("启动nginx")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// index.html\nvar xhr = new XMLHttpRequest();\n// 前端开关：浏览器是否读写cookie\nxhr.withCredentials = true;\n// 访问nginx中的代理服务器\nxhr.open('get', 'http://www.domain1.com:81/?user=admin', true);\nxhr.send();\n复制代码\n// server.js\nvar http = require('http');\nvar server = http.createServer();\nvar qs = require('querystring');\nserver.on('request', function(req, res) {\n    var params = qs.parse(req.url.substring(2));\n    // 向前台写cookie\n    res.writeHead(200, {\n        'Set-Cookie': 'l=a123456;Path=/;Domain=www.domain2.com;HttpOnly'   // HttpOnly:脚本无法读取\n    });\n    res.write(JSON.stringify(params));\n    res.end();\n});\nserver.listen('8080');\nconsole.log('Server is running at port 8080...');\n复制代码\n")])])]),n("h3",{attrs:{id:"_7-window-name-iframe"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-window-name-iframe"}},[e._v("#")]),e._v(" 7.window.name + iframe")]),e._v(" "),n("p",[e._v("window.name属性的独特之处：name值在不同的页面（甚至不同域名）加载后依旧存在，并且可以支持非常长的 name 值（2MB）。")]),e._v(" "),n("p",[e._v("其中a.html和b.html是同域的，都是"),n("code",[e._v("http://localhost:3000")]),e._v(";而c.html是"),n("code",[e._v("http://localhost:4000")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(' // a.html(http://localhost:3000/b.html)\n  <iframe src="http://localhost:4000/c.html" frameborder="0" onload="load()" id="iframe"></iframe>\n  <script>\n    let first = true\n    // onload事件会触发2次，第1次加载跨域页，并留存数据于window.name\n    function load() {\n      if(first){\n      // 第1次onload(跨域页)成功后，切换到同域代理页面\n        let iframe = document.getElementById(\'iframe\');\n        iframe.src = \'http://localhost:3000/b.html\';\n        first = false;\n      }else{\n      // 第2次onload(同域b.html页)成功后，读取同域window.name中数据\n        console.log(iframe.contentWindow.name);\n      }\n    }\n  <\/script>\n复制代码\n')])])]),n("p",[e._v("b.html为中间代理页，与a.html同域，内容为空。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(" // c.html(http://localhost:4000/c.html)\n  <script>\n    window.name = '我不爱你'  \n  <\/script>\n复制代码\n")])])]),n("p",[e._v("总结：通过iframe的src属性由外域转向本地域，跨域数据即由iframe的window.name从外域传递到本地域。这个就巧妙地绕过了浏览器的跨域访问限制，但同时它又是安全操作。")]),e._v(" "),n("h3",{attrs:{id:"_8-location-hash-iframe"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-location-hash-iframe"}},[e._v("#")]),e._v(" 8.location.hash +  iframe")]),e._v(" "),n("p",[e._v("实现原理： a.html欲与c.html跨域相互通信，通过中间页b.html来实现。 三个页面，不同域之间利用iframe的location.hash传值，相同域之间直接js访问来通信。")]),e._v(" "),n("p",[e._v("具体实现步骤：一开始a.html给c.html传一个hash值，然后c.html收到hash值后，再把hash值传递给b.html，最后b.html将结果放到a.html的hash值中。 同样的，a.html和b.html是同域的，都是"),n("code",[e._v("http://localhost:3000")]),e._v(";而c.html是"),n("code",[e._v("http://localhost:4000")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(" // a.html\n  <iframe src=\"http://localhost:4000/c.html#iloveyou\"></iframe>\n  <script>\n    window.onhashchange = function () { //检测hash的变化\n      console.log(location.hash);\n    }\n  <\/script>\n复制代码\n // b.html\n  <script>\n    window.parent.parent.location.hash = location.hash \n    //b.html将结果放到a.html的hash值中，b.html可通过parent.parent访问a.html页面\n  <\/script>\n复制代码\n // c.html\n console.log(location.hash);\n  let iframe = document.createElement('iframe');\n  iframe.src = 'http://localhost:3000/b.html#idontloveyou';\n  document.body.appendChild(iframe);\n复制代码\n")])])]),n("h3",{attrs:{id:"_9-document-domain-iframe"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_9-document-domain-iframe"}},[e._v("#")]),e._v(" 9.document.domain + iframe")]),e._v(" "),n("p",[n("strong",[e._v("该方式只能用于二级域名相同的情况下，比如 "),n("code",[e._v("a.test.com")]),e._v(" 和 "),n("code",[e._v("b.test.com")]),e._v(" 适用于该方式")]),e._v("。 只需要给页面添加 "),n("code",[e._v("document.domain ='test.com'")]),e._v(" 表示二级域名都相同就可以实现跨域。")]),e._v(" "),n("p",[e._v("实现原理：两个页面都通过js强制设置document.domain为基础主域，就实现了同域。")]),e._v(" "),n("p",[e._v("我们看个例子：页面"),n("code",[e._v("a.zf1.cn:3000/a.html")]),e._v("获取页面"),n("code",[e._v("b.zf1.cn:3000/b.html")]),e._v("中a的值")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// a.html\n<body>\n helloa\n  <iframe src="http://b.zf1.cn:3000/b.html" frameborder="0" onload="load()" id="frame"></iframe>\n  <script>\n    document.domain = \'zf1.cn\'\n    function load() {\n      console.log(frame.contentWindow.a);\n    }\n  <\/script>\n</body>\n复制代码\n// b.html\n<body>\n   hellob\n   <script>\n     document.domain = \'zf1.cn\'\n     var a = 100;\n   <\/script>\n</body>\n复制代码\n')])])]),n("h2",{attrs:{id:"三、总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三、总结"}},[e._v("#")]),e._v(" 三、总结")]),e._v(" "),n("ul",[n("li",[e._v("CORS支持所有类型的HTTP请求，是跨域HTTP请求的根本解决方案")]),e._v(" "),n("li",[e._v("JSONP只支持GET请求，JSONP的优势在于支持老式浏览器，以及可以向不支持CORS的网站请求数据。")]),e._v(" "),n("li",[e._v("不管是Node中间件代理还是nginx反向代理，主要是通过同源策略对服务器不加限制。")]),e._v(" "),n("li",[e._v("日常工作中，用得比较多的跨域方案是cors和nginx反向代理")])]),e._v(" "),n("p",[n("strong",[e._v("给大家推荐一个好用的BUG监控工具"),n("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fwww.fundebug.com%2F%3Futm_source%3Dliao",target:"_blank",rel:"noopener noreferrer"}},[e._v("Fundebug"),n("OutboundLink")],1),e._v("，欢迎免费试用！")])]),e._v(" "),n("h2",{attrs:{id:"参考文章"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[e._v("#")]),e._v(" 参考文章")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://juejin.cn/post/6844903767226351623",target:"_blank",rel:"noopener noreferrer"}},[e._v("九种跨域方式实现原理（完整版） - 掘金 (juejin.cn)"),n("OutboundLink")],1)]),e._v(" "),n("li",[n("a",{attrs:{href:"https://link.juejin.cn?target=http%3A%2F%2Fwww.zhufengpeixun.cn%2Fmain%2Fcourse%2Findex.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("珠峰架构课(强烈推荐)"),n("OutboundLink")],1)]),e._v(" "),n("li",[n("a",{attrs:{href:"https://link.juejin.cn?target=http%3A%2F%2Fwww.ruanyifeng.com%2Fblog%2F2016%2F04%2Fcors.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("跨域资源共享 CORS 详解"),n("OutboundLink")],1)]),e._v(" "),n("li",[n("a",{attrs:{href:"https://juejin.cn/book/6844733763675488269/section/6844733763771957261",target:"_blank",rel:"noopener noreferrer"}},[e._v("前端面试之道"),n("OutboundLink")],1)]),e._v(" "),n("li",[n("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FAPI%2FWindow%2FpostMessage",target:"_blank",rel:"noopener noreferrer"}},[e._v("window.postMessage"),n("OutboundLink")],1)]),e._v(" "),n("li",[n("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fsegmentfault.com%2Fa%2F1190000011145364",target:"_blank",rel:"noopener noreferrer"}},[e._v("前端常见跨域解决方案（全）"),n("OutboundLink")],1)]),e._v(" "),n("li",[n("a",{attrs:{href:"https://juejin.cn/post/6844903607297376263",target:"_blank",rel:"noopener noreferrer"}},[e._v("深入跨域问题(4) - 利用代理解决跨域"),n("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=a.exports}}]);