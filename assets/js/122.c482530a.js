(window.webpackJsonp=window.webpackJsonp||[]).push([[122],{520:function(t,s,a){"use strict";a.r(s);var n=a(28),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"面试官-javascript中执行上下文和执行栈是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#面试官-javascript中执行上下文和执行栈是什么"}},[t._v("#")]),t._v(" 面试官：JavaScript中执行上下文和执行栈是什么？")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://static.vue-js.com/8652b710-74c1-11eb-85f6-6fac77c0c9b3.png",alt:""}})]),t._v(" "),a("h3",{attrs:{id:"_4-执行上下文-执行环境"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-执行上下文-执行环境"}},[t._v("#")]),t._v(" 4. 执行上下文（执行环境）")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://juejin.im/post/6844903682283143181",target:"_blank",rel:"noopener noreferrer"}},[t._v("理解 JavaScript 中的执行上下文和执行栈"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/mqyqingfeng/Blog/issues/4",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaScript深入之执行上下文栈"),a("OutboundLink")],1)])]),t._v(" "),a("h4",{attrs:{id:"_4-1-是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-是什么"}},[t._v("#")]),t._v(" 4.1 是什么")]),t._v(" "),a("p",[t._v("概念：执行上下文（execution context）是评估和执行 JavaScript 代码环境的一个抽象概念。每当 Javascript代码在运行的时候，它都是在执行上下文中运行。")]),t._v(" "),a("p",[t._v('解释：我们知道JavaScript 引擎是顺序执行的，但它是一段一段地分析执行的，当执行一段代码的时候，会进行一个“准备工作”，比如变量提升、函数提升等，这里的“准备工作”就叫做"执行上下文(execution context)"。')]),t._v(" "),a("h4",{attrs:{id:"_4-2-类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-类型"}},[t._v("#")]),t._v(" 4.2 类型")]),t._v(" "),a("p",[t._v("JavaScript 中有三种执行上下文类型。")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("全局执行上下文")]),t._v(" — 这是默认或者说基础的上下文，任何不在函数内部的代码都在全局上下文中。它会执行两件事：创建一个全局的 window 对象（浏览器的情况下），并且设置 this 的值等于这个全局对象。一个程序中只会有一个全局执行上下文。")]),t._v(" "),a("li",[a("strong",[t._v("函数执行上下文")]),t._v(" — 每当一个函数被调用时, 都会为该函数创建一个新的上下文。每个函数都有它自己的执行上下文，不过是在函数被调用时创建的。函数上下文可以有任意多个。每当一个新的执行上下文被创建，它会按定义的顺序（将在后文讨论）执行一系列步骤。")]),t._v(" "),a("li",[a("strong",[t._v("Eval 函数执行上下文")]),t._v(" — 执行在 "),a("code",[t._v("eval")]),t._v(" 函数内部的代码也会有它属于自己的执行上下文，但由于 JavaScript 开发者并不经常使用 "),a("code",[t._v("eval")]),t._v("，所以在这里我不会讨论它。")])]),t._v(" "),a("h4",{attrs:{id:"_4-3-执行栈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-执行栈"}},[t._v("#")]),t._v(" 4.3 执行栈")]),t._v(" "),a("p",[t._v("也叫“调用栈”，是一种拥有 LIFO（后进先出）数据结构的栈，被用来存储代码运行时创建的所有执行上下文。")]),t._v(" "),a("p",[t._v("当 JavaScript 引擎第一次执行脚本时，它会创建一个全局的执行上下文（"),a("code",[t._v("this")]),t._v(" 绑定）并压入当前执行栈。每当引擎遇到一个函数调用，它都会为该函数创建一个新的执行上下文并压入栈的顶部。")]),t._v(" "),a("p",[t._v("引擎会执行那些执行上下文位于栈顶的函数。当该函数执行结束时，执行上下文从栈中弹出，控制流程到达当前栈中的下一个上下文。")]),t._v(" "),a("h4",{attrs:{id:"_4-4-三个重要属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-三个重要属性"}},[t._v("#")]),t._v(" 4.4 三个重要属性")]),t._v(" "),a("ul",[a("li",[t._v("变量对象(Variable object，VO)")]),t._v(" "),a("li",[t._v("作用域链(Scope chain)")]),t._v(" "),a("li",[t._v("this")])]),t._v(" "),a("h3",{attrs:{id:"_5-变量对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-变量对象"}},[t._v("#")]),t._v(" 5. 变量对象")]),t._v(" "),a("p",[t._v("概念：变量对象是与执行上下文相关的数据作用域，存储了在上下文中定义的变量和函数声明。")]),t._v(" "),a("ul",[a("li",[t._v("全局对象 - 全局执行上下文：是作用域链的头（在浏览器中，就是Window 对象）")]),t._v(" "),a("li",[t._v("活动对象 - 函数执行上下文：是在进入函数上下文时刻被创建的，它通过函数的 arguments 属性初始化。arguments 属性值是 Arguments 对象。")])]),t._v(" "),a("h2",{attrs:{id:"一、执行上下文"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、执行上下文"}},[t._v("#")]),t._v(" 一、执行上下文")]),t._v(" "),a("p",[t._v("简单的来说，执行上下文是一种对"),a("code",[t._v("Javascript")]),t._v("代码执行环境的抽象概念，也就是说只要有"),a("code",[t._v("Javascript")]),t._v("代码运行，那么它就一定是运行在执行上下文中")]),t._v(" "),a("p",[t._v("执行上下文的类型分为三种：")]),t._v(" "),a("ul",[a("li",[t._v("全局执行上下文：只有一个，浏览器中的全局对象就是 "),a("code",[t._v("window")]),t._v("对象，"),a("code",[t._v("this")]),t._v(" 指向这个全局对象")]),t._v(" "),a("li",[t._v("函数执行上下文：存在无数个，只有在函数被调用的时候才会被创建，每次调用函数都会创建一个新的执行上下文")]),t._v(" "),a("li",[t._v("Eval 函数执行上下文： 指的是运行在 "),a("code",[t._v("eval")]),t._v(" 函数中的代码，很少用而且不建议使用")])]),t._v(" "),a("p",[t._v("下面给出全局上下文和函数上下文的例子：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://static.vue-js.com/90dd3b60-74c1-11eb-85f6-6fac77c0c9b3.png",alt:""}})]),t._v(" "),a("p",[t._v("紫色框住的部分为全局上下文，蓝色和橘色框起来的是不同的函数上下文。只有全局上下文（的变量）能被其他任何上下文访问")]),t._v(" "),a("p",[t._v("可以有任意多个函数上下文，每次调用函数创建一个新的上下文，会创建一个私有作用域，函数内部声明的任何变量都不能在当前函数作用域外部直接访问")]),t._v(" "),a("h2",{attrs:{id:"二、生命周期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、生命周期"}},[t._v("#")]),t._v(" 二、生命周期")]),t._v(" "),a("p",[t._v("执行上下文的生命周期包括三个阶段：创建阶段 → 执行阶段 → 回收阶段")]),t._v(" "),a("h3",{attrs:{id:"创建阶段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建阶段"}},[t._v("#")]),t._v(" 创建阶段")]),t._v(" "),a("p",[t._v("创建阶段即当函数被调用，但未执行任何其内部代码之前")]),t._v(" "),a("p",[t._v("创建阶段做了三件事：")]),t._v(" "),a("ul",[a("li",[t._v("确定 this 的值，也被称为 "),a("code",[t._v("This Binding")])]),t._v(" "),a("li",[t._v("LexicalEnvironment（词法环境） 组件被创建")]),t._v(" "),a("li",[t._v("VariableEnvironment（变量环境） 组件被创建")])]),t._v(" "),a("p",[t._v("伪代码如下：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("ExecutionContext "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n  ThisBinding "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 确定this ")]),t._v("\n  LexicalEnvironment "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 词法环境")]),t._v("\n  VariableEnvironment "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 变量环境")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h4",{attrs:{id:"this-binding"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#this-binding"}},[t._v("#")]),t._v(" This Binding")]),t._v(" "),a("p",[t._v("确定"),a("code",[t._v("this")]),t._v("的值我们前面讲到，"),a("code",[t._v("this")]),t._v("的值是在执行的时候才能确认，定义的时候不能确认")]),t._v(" "),a("h4",{attrs:{id:"词法环境"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#词法环境"}},[t._v("#")]),t._v(" 词法环境")]),t._v(" "),a("p",[t._v("词法环境有两个组成部分：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("全局环境：是一个没有外部环境的词法环境，其外部环境引用为"),a("code",[t._v("null")]),t._v("，有一个全局对象，"),a("code",[t._v("this")]),t._v(" 的值指向这个全局对象")])]),t._v(" "),a("li",[a("p",[t._v("函数环境：用户在函数中定义的变量被存储在环境记录中，包含了"),a("code",[t._v("arguments")]),t._v(" 对象，外部环境的引用可以是全局环境，也可以是包含内部函数的外部函数环境")])])]),t._v(" "),a("p",[t._v("伪代码如下：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("GlobalExectionContext "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 全局执行上下文")]),t._v("\n  LexicalEnvironment"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 词法环境")]),t._v("\n    EnvironmentRecord"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 环境记录")]),t._v("\n      Type"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Object"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("           "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 全局环境")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 标识符绑定在这里 ")]),t._v("\n      outer"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("           "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对外部环境的引用")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("  \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nFunctionExectionContext "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 函数执行上下文")]),t._v("\n  LexicalEnvironment"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 词法环境")]),t._v("\n    EnvironmentRecord"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 环境记录")]),t._v("\n      Type"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Declarative"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 函数环境")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 标识符绑定在这里      // 对外部环境的引用")]),t._v("\n      outer"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Global or outer "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" environment reference"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("  \n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("  \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h4",{attrs:{id:"变量环境"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量环境"}},[t._v("#")]),t._v(" 变量环境")]),t._v(" "),a("p",[t._v("变量环境也是一个词法环境，因此它具有上面定义的词法环境的所有属性")]),t._v(" "),a("p",[t._v("在 ES6 中，词法环境和变量环境的区别在于前者用于存储函数声明和变量（ "),a("code",[t._v("let")]),t._v(" 和 "),a("code",[t._v("const")]),t._v(" ）绑定，而后者仅用于存储变量（ "),a("code",[t._v("var")]),t._v(" ）绑定")]),t._v(" "),a("p",[t._v("举个例子")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("multiply")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" g "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" e "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" f "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" g"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nc "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("multiply")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("执行上下文如下：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("GlobalExectionContext "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n  ThisBinding"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Global Object"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  LexicalEnvironment"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 词法环境")]),t._v("\n    EnvironmentRecord"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n      Type"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Object"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  \n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 标识符绑定在这里  ")]),t._v("\n      a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" uninitialized "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  \n      b"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" uninitialized "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  \n      multiply"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" func "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("  \n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("  \n    outer"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("  \n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  VariableEnvironment"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 变量环境")]),t._v("\n    EnvironmentRecord"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n      Type"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Object"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  \n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 标识符绑定在这里  ")]),t._v("\n      c"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  \n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("  \n    outer"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("  \n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("  \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nFunctionExectionContext "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n   \n  ThisBinding"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Global Object"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  LexicalEnvironment"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n    EnvironmentRecord"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n      Type"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Declarative"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  \n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 标识符绑定在这里  ")]),t._v("\n      Arguments"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" length"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  \n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  \n    outer"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("GlobalLexicalEnvironment"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("  \n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  VariableEnvironment"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n    EnvironmentRecord"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n      Type"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Declarative"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  \n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 标识符绑定在这里  ")]),t._v("\n      g"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v("  \n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  \n    outer"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("GlobalLexicalEnvironment"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("  \n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("  \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("留意上面的代码，"),a("code",[t._v("let")]),t._v("和"),a("code",[t._v("const")]),t._v("定义的变量"),a("code",[t._v("a")]),t._v("和"),a("code",[t._v("b")]),t._v("在创建阶段没有被赋值，但"),a("code",[t._v("var")]),t._v("声明的变量从在创建阶段被赋值为"),a("code",[t._v("undefined")])]),t._v(" "),a("p",[t._v("这是因为，创建阶段，会在代码中扫描变量和函数声明，然后将函数声明存储在环境中")]),t._v(" "),a("p",[t._v("但变量会被初始化为"),a("code",[t._v("undefined")]),t._v("("),a("code",[t._v("var")]),t._v("声明的情况下)和保持"),a("code",[t._v("uninitialized")]),t._v("(未初始化状态)(使用"),a("code",[t._v("let")]),t._v("和"),a("code",[t._v("const")]),t._v("声明的情况下)")]),t._v(" "),a("p",[t._v("这就是变量提升的实际原因")]),t._v(" "),a("h3",{attrs:{id:"执行阶段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#执行阶段"}},[t._v("#")]),t._v(" 执行阶段")]),t._v(" "),a("p",[t._v("在这阶段，执行变量赋值、代码执行")]),t._v(" "),a("p",[t._v("如果 "),a("code",[t._v("Javascript")]),t._v(" 引擎在源代码中声明的实际位置找不到变量的值，那么将为其分配 "),a("code",[t._v("undefined")]),t._v(" 值")]),t._v(" "),a("h3",{attrs:{id:"回收阶段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#回收阶段"}},[t._v("#")]),t._v(" 回收阶段")]),t._v(" "),a("p",[t._v("执行上下文出栈等待虚拟机回收执行上下文")]),t._v(" "),a("h2",{attrs:{id:"二、执行栈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、执行栈"}},[t._v("#")]),t._v(" 二、执行栈")]),t._v(" "),a("p",[t._v("执行栈，也叫调用栈，具有 LIFO（后进先出）结构，用于存储在代码执行期间创建的所有执行上下文")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://static.vue-js.com/9eda0310-74c1-11eb-ab90-d9ae814b240d.png",alt:""}})]),t._v(" "),a("p",[t._v("当"),a("code",[t._v("Javascript")]),t._v("引擎开始执行你第一行脚本代码的时候，它就会创建一个全局执行上下文然后将它压到执行栈中")]),t._v(" "),a("p",[t._v("每当引擎碰到一个函数的时候，它就会创建一个函数执行上下文，然后将这个执行上下文压到执行栈中")]),t._v(" "),a("p",[t._v("引擎会执行位于执行栈栈顶的执行上下文(一般是函数执行上下文)，当该函数执行结束后，对应的执行上下文就会被弹出，然后控制流程到达执行栈的下一个执行上下文")]),t._v(" "),a("p",[t._v("举个例子：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hello World!'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("first")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Inside first function'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("second")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Again inside first function'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("second")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Inside second function'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("first")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Inside Global Execution Context'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("转化成图的形式")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://static.vue-js.com/ac11a600-74c1-11eb-ab90-d9ae814b240d.png",alt:""}})]),t._v(" "),a("p",[t._v("简单分析一下流程：")]),t._v(" "),a("ul",[a("li",[t._v("创建全局上下文请压入执行栈")]),t._v(" "),a("li",[a("code",[t._v("first")]),t._v("函数被调用，创建函数执行上下文并压入栈")]),t._v(" "),a("li",[t._v("执行"),a("code",[t._v("first")]),t._v("函数过程遇到"),a("code",[t._v("second")]),t._v("函数，再创建一个函数执行上下文并压入栈")]),t._v(" "),a("li",[a("code",[t._v("second")]),t._v("函数执行完毕，对应的函数执行上下文被推出执行栈，执行下一个执行上下文"),a("code",[t._v("first")]),t._v("函数")]),t._v(" "),a("li",[a("code",[t._v("first")]),t._v("函数执行完毕，对应的函数执行上下文也被推出栈中，然后执行全局上下文")]),t._v(" "),a("li",[t._v("所有代码执行完毕，全局上下文也会被推出栈中，程序结束")])]),t._v(" "),a("h2",{attrs:{id:"参考文献"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考文献"}},[t._v("#")]),t._v(" 参考文献")]),t._v(" "),a("ul",[a("li",[t._v("https://zhuanlan.zhihu.com/p/107552264")])])])}),[],!1,null,null,null);s.default=e.exports}}]);